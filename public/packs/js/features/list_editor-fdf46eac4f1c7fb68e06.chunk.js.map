{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/list_editor/components/account.jsx","webpack:///./app/javascript/mastodon/features/list_editor/components/edit_list_form.jsx","webpack:///./app/javascript/mastodon/features/list_editor/components/search.jsx","webpack:///./app/javascript/mastodon/features/list_editor/index.jsx"],"names":["messages","defineMessages","remove","id","defaultMessage","add","Account","ImmutablePureComponent","render","account","intl","onRemove","onAdd","added","this","props","button","_jsx","IconButton","icon","title","formatMessage","onClick","className","Avatar","size","DisplayName","propTypes","ImmutablePropTypes","map","isRequired","PropTypes","object","func","bool","defaultProps","connect","makeMapStateToProps","getAccount","makeGetAccount","mapStateToProps","state","_ref","accountId","getIn","includes","mapDispatchToProps","dispatch","_ref2","removeFromListEditor","addToListEditor","injectIntl","ListForm","PureComponent","constructor","arguments","handleChange","e","onChange","target","value","handleSubmit","preventDefault","onSubmit","handleClick","disabled","changeListEditorTitle","submitListEditor","search","Search","handleKeyUp","keyCode","handleClear","onClear","hasValue","length","style","display","type","onKeyUp","placeholder","role","tabIndex","Icon","classNames","active","fetchListSuggestions","clearListSuggestions","changeListSuggestions","ListEditor","componentDidMount","onInitialize","listId","componentWillUnmount","onReset","accountIds","searchAccountIds","showSearch","EditListForm","Motion","defaultStyle","x","spring","stiffness","damping","transform","visibility","string","onClose","list","setupListEditor","resetListEditor"],"mappings":"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","file":"js/features/list_editor-fdf46eac4f1c7fb68e06.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { removeFromListEditor, addToListEditor } from '../../../actions/lists';\nimport { Avatar } from '../../../components/avatar';\nimport { DisplayName } from '../../../components/display_name';\nimport { IconButton } from '../../../components/icon_button';\nimport { makeGetAccount } from '../../../selectors';\n\nconst messages = defineMessages({\n  remove: { id: 'lists.account.remove', defaultMessage: 'Remove from list' },\n  add: { id: 'lists.account.add', defaultMessage: 'Add to list' },\n});\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, { accountId, added }) => ({\n    account: getAccount(state, accountId),\n    added: typeof added === 'undefined' ? state.getIn(['listEditor', 'accounts', 'items']).includes(accountId) : added,\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { accountId }) => ({\n  onRemove: () => dispatch(removeFromListEditor(accountId)),\n  onAdd: () => dispatch(addToListEditor(accountId)),\n});\n\nclass Account extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    intl: PropTypes.object.isRequired,\n    onRemove: PropTypes.func.isRequired,\n    onAdd: PropTypes.func.isRequired,\n    added: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    added: false,\n  };\n\n  render () {\n    const { account, intl, onRemove, onAdd, added } = this.props;\n\n    let button;\n\n    if (added) {\n      button = <IconButton icon='times' title={intl.formatMessage(messages.remove)} onClick={onRemove} />;\n    } else {\n      button = <IconButton icon='plus' title={intl.formatMessage(messages.add)} onClick={onAdd} />;\n    }\n\n    return (\n      <div className='account'>\n        <div className='account__wrapper'>\n          <div className='account__display-name'>\n            <div className='account__avatar-wrapper'><Avatar account={account} size={36} /></div>\n            <DisplayName account={account} />\n          </div>\n\n          <div className='account__relationship'>\n            {button}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(injectIntl(Account));\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { connect } from 'react-redux';\n\nimport { changeListEditorTitle, submitListEditor } from '../../../actions/lists';\nimport { IconButton } from '../../../components/icon_button';\n\nconst messages = defineMessages({\n  title: { id: 'lists.edit.submit', defaultMessage: 'Change title' },\n});\n\nconst mapStateToProps = state => ({\n  value: state.getIn(['listEditor', 'title']),\n  disabled: !state.getIn(['listEditor', 'isChanged']) || !state.getIn(['listEditor', 'title']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: value => dispatch(changeListEditorTitle(value)),\n  onSubmit: () => dispatch(submitListEditor(false)),\n});\n\nclass ListForm extends PureComponent {\n\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    disabled: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  handleChange = e => {\n    this.props.onChange(e.target.value);\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit();\n  };\n\n  handleClick = () => {\n    this.props.onSubmit();\n  };\n\n  render () {\n    const { value, disabled, intl } = this.props;\n\n    const title = intl.formatMessage(messages.title);\n\n    return (\n      <form className='column-inline-form' onSubmit={this.handleSubmit}>\n        <input\n          className='setting-text'\n          value={value}\n          onChange={this.handleChange}\n        />\n\n        <IconButton\n          disabled={disabled}\n          icon='check'\n          title={title}\n          onClick={this.handleClick}\n        />\n      </form>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(ListForm));\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport { connect } from 'react-redux';\n\nimport { Icon }  from 'mastodon/components/icon';\n\nimport { fetchListSuggestions, clearListSuggestions, changeListSuggestions } from '../../../actions/lists';\n\nconst messages = defineMessages({\n  search: { id: 'lists.search', defaultMessage: 'Search among people you follow' },\n});\n\nconst mapStateToProps = state => ({\n  value: state.getIn(['listEditor', 'suggestions', 'value']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: value => dispatch(fetchListSuggestions(value)),\n  onClear: () => dispatch(clearListSuggestions()),\n  onChange: value => dispatch(changeListSuggestions(value)),\n});\n\nclass Search extends PureComponent {\n\n  static propTypes = {\n    intl: PropTypes.object.isRequired,\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n  };\n\n  handleChange = e => {\n    this.props.onChange(e.target.value);\n  };\n\n  handleKeyUp = e => {\n    if (e.keyCode === 13) {\n      this.props.onSubmit(this.props.value);\n    }\n  };\n\n  handleClear = () => {\n    this.props.onClear();\n  };\n\n  render () {\n    const { value, intl } = this.props;\n    const hasValue = value.length > 0;\n\n    return (\n      <div className='list-editor__search search'>\n        <label>\n          <span style={{ display: 'none' }}>{intl.formatMessage(messages.search)}</span>\n\n          <input\n            className='search__input'\n            type='text'\n            value={value}\n            onChange={this.handleChange}\n            onKeyUp={this.handleKeyUp}\n            placeholder={intl.formatMessage(messages.search)}\n          />\n        </label>\n\n        <div role='button' tabIndex={0} className='search__icon' onClick={this.handleClear}>\n          <Icon id='search' className={classNames({ active: !hasValue })} />\n          <Icon id='times-circle' aria-label={intl.formatMessage(messages.search)} className={classNames({ active: hasValue })} />\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(Search));\n","import PropTypes from 'prop-types';\n\nimport { injectIntl } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport spring from 'react-motion/lib/spring';\n\nimport { setupListEditor, clearListSuggestions, resetListEditor } from '../../actions/lists';\nimport Motion from '../ui/util/optional_motion';\n\nimport Account from './components/account';\nimport EditListForm from './components/edit_list_form';\nimport Search from './components/search';\n\nconst mapStateToProps = state => ({\n  accountIds: state.getIn(['listEditor', 'accounts', 'items']),\n  searchAccountIds: state.getIn(['listEditor', 'suggestions', 'items']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onInitialize: listId => dispatch(setupListEditor(listId)),\n  onClear: () => dispatch(clearListSuggestions()),\n  onReset: () => dispatch(resetListEditor()),\n});\n\nclass ListEditor extends ImmutablePureComponent {\n\n  static propTypes = {\n    listId: PropTypes.string.isRequired,\n    onClose: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    onInitialize: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n    onReset: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list.isRequired,\n    searchAccountIds: ImmutablePropTypes.list.isRequired,\n  };\n\n  componentDidMount () {\n    const { onInitialize, listId } = this.props;\n    onInitialize(listId);\n  }\n\n  componentWillUnmount () {\n    const { onReset } = this.props;\n    onReset();\n  }\n\n  render () {\n    const { accountIds, searchAccountIds, onClear } = this.props;\n    const showSearch = searchAccountIds.size > 0;\n\n    return (\n      <div className='modal-root__modal list-editor'>\n        <EditListForm />\n\n        <Search />\n\n        <div className='drawer__pager'>\n          <div className='drawer__inner list-editor__accounts'>\n            {accountIds.map(accountId => <Account key={accountId} accountId={accountId} added />)}\n          </div>\n\n          {showSearch && <div role='button' tabIndex={-1} className='drawer__backdrop' onClick={onClear} />}\n\n          <Motion defaultStyle={{ x: -100 }} style={{ x: spring(showSearch ? 0 : -100, { stiffness: 210, damping: 20 }) }}>\n            {({ x }) => (\n              <div className='drawer__inner backdrop' style={{ transform: x === 0 ? null : `translateX(${x}%)`, visibility: x === -100 ? 'hidden' : 'visible' }}>\n                {searchAccountIds.map(accountId => <Account key={accountId} accountId={accountId} />)}\n              </div>\n            )}\n          </Motion>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(ListEditor));\n"],"sourceRoot":""}