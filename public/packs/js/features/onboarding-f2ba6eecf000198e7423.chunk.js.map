{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/onboarding/components/arrow_small_right.jsx","webpack:///./app/javascript/mastodon/features/onboarding/components/step.jsx","webpack:///./app/javascript/mastodon/features/onboarding/follows.jsx","webpack:///./app/javascript/mastodon/features/onboarding/share.jsx","webpack:///./app/javascript/mastodon/features/onboarding/index.jsx"],"names":["ArrowSmallRight","_jsx","xmlns","viewBox","fill","fillRule","d","clipRule","Step","_ref","label","description","icon","completed","onClick","href","content","_jsxs","_Fragment","children","className","Icon","id","Check","target","rel","Follows","PureComponent","componentDidMount","dispatch","this","props","fetchSuggestions","componentWillUnmount","markAsPartial","render","onBack","isLoading","suggestions","multiColumn","loadedContent","Array","map","_","i","EmptyAccount","isEmpty","FormattedMessage","defaultMessage","suggestion","Account","get","withBio","Column","ColumnBackButton","values","strong","chunks","connect","state","getIn","messages","defineMessages","shareableMessage","CopyPasteText","constructor","arguments","copied","focused","setRef","c","input","handleInputClick","setState","focus","select","setSelectionRange","value","length","handleButtonClick","e","stopPropagation","navigator","clipboard","writeText","blur","timeout","setTimeout","handleFocus","handleBlur","clearTimeout","_jsx2","classNames","tabIndex","role","readOnly","ref","onFocus","onBlur","TipCarousel","index","handleSwipe","handleChangeIndex","Number","currentTarget","getAttribute","handleKeyDown","key","preventDefault","_ref2","Math","abs","_ref3","_ref4","onKeyDown","SwipeableViews","onChangeIndex","enableMouseEvents","active","Share","account","intl","url","URL","document","baseURI","formatMessage","username","domain","Link","to","me","injectIntl","template","Onboarding","ImmutablePureComponent","step","profileClicked","shareClicked","handleClose","router","context","closeOnboarding","history","push","handleProfileClick","handleFollowClick","handleComposeClick","focusCompose","handleShareClick","handleBackClick","handleWindowFocus","_debounce","fetchAccount","trailing","window","addEventListener","removeEventListener","src","illustration","alt","endsWith","count","emoji","assetHost","Helmet","name","contextTypes","PropTypes","object","isRequired","propTypes","func","ImmutablePropTypes","bool","mapStateToProps","getAccount","makeGetAccount"],"mappings":"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","file":"js/features/onboarding-f2ba6eecf000198e7423.chunk.js","sourcesContent":["const ArrowSmallRight = () => (\n  <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20' fill='currentColor'>\n    <path fillRule='evenodd' d='M5 10a.75.75 0 01.75-.75h6.638L10.23 7.29a.75.75 0 111.04-1.08l3.5 3.25a.75.75 0 010 1.08l-3.5 3.25a.75.75 0 11-1.04-1.08l2.158-1.96H5.75A.75.75 0 015 10z' clipRule='evenodd' />\n  </svg>\n);\n\nexport default ArrowSmallRight;","import PropTypes from 'prop-types';\n\nimport { Check } from 'mastodon/components/check';\nimport { Icon }  from 'mastodon/components/icon';\n\nimport ArrowSmallRight from './arrow_small_right';\n\nconst Step = ({ label, description, icon, completed, onClick, href }) => {\n  const content = (\n    <>\n      <div className='onboarding__steps__item__icon'>\n        <Icon id={icon} />\n      </div>\n\n      <div className='onboarding__steps__item__description'>\n        <h6>{label}</h6>\n        <p>{description}</p>\n      </div>\n\n      <div className={completed ? 'onboarding__steps__item__progress' : 'onboarding__steps__item__go'}>\n        {completed ? <Check /> : <ArrowSmallRight />}\n      </div>\n    </>\n  );\n\n  if (href) {\n    return (\n      <a href={href} onClick={onClick} target='_blank' rel='noopener' className='onboarding__steps__item'>\n        {content}\n      </a>\n    );\n  }\n\n  return (\n    <button onClick={onClick} className='onboarding__steps__item'>\n      {content}\n    </button>\n  );\n};\n\nStep.propTypes = {\n  label: PropTypes.node,\n  description: PropTypes.node,\n  icon: PropTypes.string,\n  completed: PropTypes.bool,\n  href: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nexport default Step;\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { fetchSuggestions } from 'mastodon/actions/suggestions';\nimport { markAsPartial } from 'mastodon/actions/timelines';\nimport Column from 'mastodon/components/column';\nimport ColumnBackButton from 'mastodon/components/column_back_button';\nimport { EmptyAccount } from 'mastodon/components/empty_account';\nimport Account from 'mastodon/containers/account_container';\n\nconst mapStateToProps = state => ({\n  suggestions: state.getIn(['suggestions', 'items']),\n  isLoading: state.getIn(['suggestions', 'isLoading']),\n});\n\nclass Follows extends PureComponent {\n\n  static propTypes = {\n    onBack: PropTypes.func,\n    dispatch: PropTypes.func.isRequired,\n    suggestions: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n  };\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    dispatch(fetchSuggestions(true));\n  }\n\n  componentWillUnmount () {\n    const { dispatch } = this.props;\n    dispatch(markAsPartial('home'));\n  }\n\n  render () {\n    const { onBack, isLoading, suggestions, multiColumn } = this.props;\n\n    let loadedContent;\n\n    if (isLoading) {\n      loadedContent = (new Array(8)).fill().map((_, i) => <EmptyAccount key={i} />);\n    } else if (suggestions.isEmpty()) {\n      loadedContent = <div className='follow-recommendations__empty'><FormattedMessage id='onboarding.follows.empty' defaultMessage='Unfortunately, no results can be shown right now. You can try using search or browsing the explore page to find people to follow, or try again later.' /></div>;\n    } else {\n      loadedContent = suggestions.map(suggestion => <Account id={suggestion.get('account')} key={suggestion.get('account')} withBio />);\n    }\n\n    return (\n      <Column>\n        <ColumnBackButton multiColumn={multiColumn} onClick={onBack} />\n\n        <div className='scrollable privacy-policy'>\n          <div className='column-title'>\n            <h3><FormattedMessage id='onboarding.follows.title' defaultMessage='Popular on Mastodon' /></h3>\n            <p><FormattedMessage id='onboarding.follows.lead' defaultMessage='You curate your own home feed. The more people you follow, the more active and interesting it will be. These profiles may be a good starting point—you can always unfollow them later!' /></p>\n          </div>\n\n          <div className='follow-recommendations'>\n            {loadedContent}\n          </div>\n\n          <p className='onboarding__lead'><FormattedMessage id='onboarding.tips.accounts_from_other_servers' defaultMessage='<strong>Did you know?</strong> Since Mastodon is decentralized, some profiles you come across will be hosted on servers other than yours. And yet you can interact with them seamlessly! Their server is in the second half of their username!' values={{ strong: chunks => <strong>{chunks}</strong> }} /></p>\n\n          <div className='onboarding__footer'>\n            <button className='link-button' onClick={onBack}><FormattedMessage id='onboarding.actions.back' defaultMessage='Take me back' /></button>\n          </div>\n        </div>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(Follows);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport SwipeableViews from 'react-swipeable-views';\n\nimport Column from 'mastodon/components/column';\nimport ColumnBackButton from 'mastodon/components/column_back_button';\nimport { Icon }  from 'mastodon/components/icon';\nimport { me, domain } from 'mastodon/initial_state';\n\nimport ArrowSmallRight from './components/arrow_small_right';\n\nconst messages = defineMessages({\n  shareableMessage: { id: 'onboarding.share.message', defaultMessage: 'I\\'m {username} on #Mastodon! Come follow me at {url}' },\n});\n\nconst mapStateToProps = state => ({\n  account: state.getIn(['accounts', me]),\n});\n\nclass CopyPasteText extends PureComponent {\n\n  static propTypes = {\n    value: PropTypes.string,\n  };\n\n  state = {\n    copied: false,\n    focused: false,\n  };\n\n  setRef = c => {\n    this.input = c;\n  };\n\n  handleInputClick = () => {\n    this.setState({ copied: false });\n    this.input.focus();\n    this.input.select();\n    this.input.setSelectionRange(0, this.props.value.length);\n  };\n\n  handleButtonClick = e => {\n    e.stopPropagation();\n\n    const { value } = this.props;\n    navigator.clipboard.writeText(value);\n    this.input.blur();\n    this.setState({ copied: true });\n    this.timeout = setTimeout(() => this.setState({ copied: false }), 700);\n  };\n\n  handleFocus = () => {\n    this.setState({ focused: true });\n  };\n\n  handleBlur = () => {\n    this.setState({ focused: false });\n  };\n\n  componentWillUnmount () {\n    if (this.timeout) clearTimeout(this.timeout);\n  }\n\n  render () {\n    const { value } = this.props;\n    const { copied, focused } = this.state;\n\n    return (\n      <div className={classNames('copy-paste-text', { copied, focused })} tabIndex='0' role='button' onClick={this.handleInputClick}>\n        <textarea readOnly value={value} ref={this.setRef} onClick={this.handleInputClick} onFocus={this.handleFocus} onBlur={this.handleBlur} />\n\n        <button className='button' onClick={this.handleButtonClick}>\n          <Icon id='copy' /> {copied ? <FormattedMessage id='copypaste.copied' defaultMessage='Copied' /> : <FormattedMessage id='copypaste.copy_to_clipboard' defaultMessage='Copy to clipboard' />}\n        </button>\n      </div>\n    );\n  }\n\n}\n\nclass TipCarousel extends PureComponent {\n\n  static propTypes = {\n    children: PropTypes.node,\n  };\n\n  state = {\n    index: 0,\n  };\n\n  handleSwipe = index => {\n    this.setState({ index });\n  };\n\n  handleChangeIndex = e => {\n    this.setState({ index: Number(e.currentTarget.getAttribute('data-index')) });\n  };\n\n  handleKeyDown = e => {\n    switch(e.key) {\n    case 'ArrowLeft':\n      e.preventDefault();\n      this.setState(({ index }, { children }) => ({ index: Math.abs(index - 1) % children.length }));\n      break;\n    case 'ArrowRight':\n      e.preventDefault();\n      this.setState(({ index }, { children }) => ({ index: (index + 1) % children.length }));\n      break;\n    }\n  };\n\n  render () {\n    const { children } = this.props;\n    const { index } = this.state;\n\n    return (\n      <div className='tip-carousel' tabIndex='0' onKeyDown={this.handleKeyDown}>\n        <SwipeableViews onChangeIndex={this.handleSwipe} index={index} enableMouseEvents tabIndex='-1'>\n          {children}\n        </SwipeableViews>\n\n        <div className='media-modal__pagination'>\n          {children.map((_, i) => (\n            <button key={i} className={classNames('media-modal__page-dot', { active: i === index })} data-index={i} onClick={this.handleChangeIndex}>\n              {i + 1}\n            </button>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n}\n\nclass Share extends PureComponent {\n\n  static propTypes = {\n    onBack: PropTypes.func,\n    account: ImmutablePropTypes.map,\n    multiColumn: PropTypes.bool,\n    intl: PropTypes.object,\n  };\n\n  render () {\n    const { onBack, account, multiColumn, intl } = this.props;\n\n    const url = (new URL(`/@${account.get('username')}`, document.baseURI)).href;\n\n    return (\n      <Column>\n        <ColumnBackButton multiColumn={multiColumn} onClick={onBack} />\n\n        <div className='scrollable privacy-policy'>\n          <div className='column-title'>\n            <h3><FormattedMessage id='onboarding.share.title' defaultMessage='Share your profile' /></h3>\n            <p><FormattedMessage id='onboarding.share.lead' defaultMessage='Let people know how they can find you on Mastodon!' /></p>\n          </div>\n\n          <CopyPasteText value={intl.formatMessage(messages.shareableMessage, { username: `@${account.get('username')}@${domain}`, url })} />\n\n          <TipCarousel>\n            <div><p className='onboarding__lead'><FormattedMessage id='onboarding.tips.verification' defaultMessage='<strong>Did you know?</strong> You can verify your account by putting a link to your Mastodon profile on your own website and adding the website to your profile. No fees or documents necessary!'  values={{ strong: chunks => <strong>{chunks}</strong> }}  /></p></div>\n            <div><p className='onboarding__lead'><FormattedMessage id='onboarding.tips.migration' defaultMessage='<strong>Did you know?</strong> If you feel like {domain} is not a great server choice for you in the future, you can move to another Mastodon server without losing your followers. You can even host your own server!' values={{ domain, strong: chunks => <strong>{chunks}</strong> }} /></p></div>\n            <div><p className='onboarding__lead'><FormattedMessage id='onboarding.tips.2fa' defaultMessage='<strong>Did you know?</strong> You can secure your account by setting up two-factor authentication in your account settings. It works with any TOTP app of your choice, no phone number necessary!'  values={{ strong: chunks => <strong>{chunks}</strong> }}  /></p></div>\n          </TipCarousel>\n\n          <p className='onboarding__lead'><FormattedMessage id='onboarding.share.next_steps' defaultMessage='Possible next steps:' /></p>\n\n          <div className='onboarding__links'>\n            <Link to='/home' className='onboarding__link'>\n              <FormattedMessage id='onboarding.actions.go_to_home' defaultMessage='Take me to my home feed' />\n              <ArrowSmallRight />\n            </Link>\n\n            <Link to='/explore' className='onboarding__link'>\n              <FormattedMessage id='onboarding.actions.go_to_explore' defaultMessage='Take me to trending' />\n              <ArrowSmallRight />\n            </Link>\n          </div>\n\n          <div className='onboarding__footer'>\n            <button className='link-button' onClick={onBack}><FormattedMessage id='onboarding.action.back' defaultMessage='Take me back' /></button>\n          </div>\n        </div>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(Share));\n","import PropTypes from 'prop-types';\n\nimport { FormattedMessage, injectIntl, defineMessages } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\nimport { Link } from 'react-router-dom';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { debounce } from 'lodash';\n\nimport illustration from 'mastodon/../images/elephant_ui_conversation.svg';\nimport { fetchAccount } from 'mastodon/actions/accounts';\nimport { focusCompose } from 'mastodon/actions/compose';\nimport { closeOnboarding } from 'mastodon/actions/onboarding';\nimport Column from 'mastodon/features/ui/components/column';\nimport { me } from 'mastodon/initial_state';\nimport { makeGetAccount } from 'mastodon/selectors';\nimport { assetHost } from 'mastodon/utils/config';\n\nimport ArrowSmallRight from './components/arrow_small_right';\nimport Step from './components/step';\nimport Follows from './follows';\nimport Share from './share';\n\nconst messages = defineMessages({\n  template: { id: 'onboarding.compose.template', defaultMessage: 'Hello #Mastodon!' },\n});\n\nconst mapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  return state => ({\n    account: getAccount(state, me),\n  });\n};\n\nclass Onboarding extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object.isRequired,\n  };\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    account: ImmutablePropTypes.map,\n    multiColumn: PropTypes.bool,\n  };\n\n  state = {\n    step: null,\n    profileClicked: false,\n    shareClicked: false,\n  };\n\n  handleClose = () => {\n    const { dispatch } = this.props;\n    const { router } = this.context;\n\n    dispatch(closeOnboarding());\n    router.history.push('/home');\n  };\n\n  handleProfileClick = () => {\n    this.setState({ profileClicked: true });\n  };\n\n  handleFollowClick = () => {\n    this.setState({ step: 'follows' });\n  };\n\n  handleComposeClick = () => {\n    const { dispatch, intl } = this.props;\n    const { router } = this.context;\n\n    dispatch(focusCompose(router.history, intl.formatMessage(messages.template)));\n  };\n\n  handleShareClick = () => {\n    this.setState({ step: 'share', shareClicked: true });\n  };\n\n  handleBackClick = () => {\n    this.setState({ step: null });\n  };\n\n  handleWindowFocus = debounce(() => {\n    const { dispatch, account } = this.props;\n    dispatch(fetchAccount(account.get('id')));\n  }, 1000, { trailing: true });\n\n  componentDidMount () {\n    window.addEventListener('focus', this.handleWindowFocus, false);\n  }\n\n  componentWillUnmount () {\n    window.removeEventListener('focus', this.handleWindowFocus);\n  }\n\n  render () {\n    const { account, multiColumn } = this.props;\n    const { step, shareClicked } = this.state;\n\n    switch(step) {\n    case 'follows':\n      return <Follows onBack={this.handleBackClick} multiColumn={multiColumn} />;\n    case 'share':\n      return <Share onBack={this.handleBackClick} multiColumn={multiColumn} />;\n    }\n\n    return (\n      <Column>\n        <div className='scrollable privacy-policy'>\n          <div className='column-title'>\n            <img src={illustration} alt='' className='onboarding__illustration' />\n            <h3><FormattedMessage id='onboarding.start.title' defaultMessage=\"You've made it!\" /></h3>\n            <p><FormattedMessage id='onboarding.start.lead' defaultMessage=\"Your new Mastodon account is ready to go. Here's how you can make the most of it:\" /></p>\n          </div>\n\n          <div className='onboarding__steps'>\n            <Step onClick={this.handleProfileClick} href='/settings/profile' completed={(!account.get('avatar').endsWith('missing.png')) || (account.get('display_name').length > 0 && account.get('note').length > 0)} icon='address-book-o' label={<FormattedMessage id='onboarding.steps.setup_profile.title' defaultMessage='Customize your profile' />} description={<FormattedMessage id='onboarding.steps.setup_profile.body' defaultMessage='Others are more likely to interact with you with a filled out profile.' />} />\n            <Step onClick={this.handleFollowClick} completed={(account.get('following_count') * 1) >= 7} icon='user-plus' label={<FormattedMessage id='onboarding.steps.follow_people.title' defaultMessage='Find at least {count, plural, one {one person} other {# people}} to follow' values={{ count: 7 }} />} description={<FormattedMessage id='onboarding.steps.follow_people.body' defaultMessage=\"You curate your own home feed. Let's fill it with interesting people.\" />} />\n            <Step onClick={this.handleComposeClick} completed={(account.get('statuses_count') * 1) >= 1} icon='pencil-square-o' label={<FormattedMessage id='onboarding.steps.publish_status.title' defaultMessage='Make your first post' />} description={<FormattedMessage id='onboarding.steps.publish_status.body' defaultMessage='Say hello to the world.' values={{ emoji: <img className='emojione' alt='🐘' src={`${assetHost}/emoji/1f418.svg`} /> }} />} />\n          </div>\n\n          <p className='onboarding__lead'><FormattedMessage id='onboarding.start.skip' defaultMessage=\"Don't need help getting started?\" /></p>\n\n          <div className='onboarding__links'>\n            <Link to='/explore' className='onboarding__link'>\n              <FormattedMessage id='onboarding.actions.go_to_explore' defaultMessage='Take me to trending' />\n              <ArrowSmallRight />\n            </Link>\n\n            <Link to='/home' className='onboarding__link'>\n              <FormattedMessage id='onboarding.actions.go_to_home' defaultMessage='Take me to my home feed' />\n              <ArrowSmallRight />\n            </Link>\n          </div>\n        </div>\n\n        <Helmet>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(Onboarding));\n"],"sourceRoot":""}