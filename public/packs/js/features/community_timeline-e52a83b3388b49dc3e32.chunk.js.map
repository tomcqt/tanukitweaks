{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/community_timeline/components/column_settings.jsx","webpack:///./app/javascript/mastodon/features/community_timeline/containers/column_settings_container.js","webpack:///./app/javascript/mastodon/features/community_timeline/index.jsx"],"names":["ColumnSettings","PureComponent","render","settings","onChange","this","props","_jsx","className","SettingToggle","settingPath","label","FormattedMessage","id","defaultMessage","injectIntl","connect","mapStateToProps","state","_ref","columnId","uuid","columns","getIn","index","findIndex","c","get","mapDispatchToProps","dispatch","_ref2","key","checked","changeColumnParams","changeSetting","messages","defineMessages","title","CommunityTimeline","constructor","arguments","handlePin","onlyMedia","removeColumn","addColumn","other","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setRef","handleLoadMore","maxId","expandCommunityTimeline","componentDidMount","signedIn","context","identity","disconnect","connectCommunityStream","componentDidUpdate","prevProps","componentWillUnmount","intl","hasUnread","multiColumn","pinned","_jsxs","Column","bindToDocument","ref","formatMessage","children","ColumnHeader","icon","active","onPin","onMove","onClick","ColumnSettingsContainer","StatusListContainer","prepend","DismissableBanner","values","domain","trackScroll","scrollKey","timelineId","onLoadMore","emptyMessage","Helmet","name","content","contextTypes","router","PropTypes","object","defaultProps","timelineState"],"mappings":"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","file":"js/features/community_timeline-e52a83b3388b49dc3e32.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { injectIntl, FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport SettingToggle from '../../notifications/components/setting_toggle';\n\nclass ColumnSettings extends PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n  };\n\n  render () {\n    const { settings, onChange } = this.props;\n\n    return (\n      <div>\n        <div className='column-settings__row'>\n          <SettingToggle settings={settings} settingPath={['other', 'onlyMedia']} onChange={onChange} label={<FormattedMessage id='community.column_settings.media_only' defaultMessage='Media only' />} />\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default injectIntl(ColumnSettings);\n","import { connect } from 'react-redux';\n\nimport { changeColumnParams } from '../../../actions/columns';\nimport { changeSetting } from '../../../actions/settings';\nimport ColumnSettings from '../components/column_settings';\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n\n  return {\n    settings: (uuid && index >= 0) ? columns.get(index).get('params') : state.getIn(['settings', 'community']),\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { columnId }) => {\n  return {\n    onChange (key, checked) {\n      if (columnId) {\n        dispatch(changeColumnParams(columnId, key, checked));\n      } else {\n        dispatch(changeSetting(['community', ...key], checked));\n      }\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { connect } from 'react-redux';\n\nimport { DismissableBanner } from 'mastodon/components/dismissable_banner';\nimport { domain } from 'mastodon/initial_state';\n\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { connectCommunityStream } from '../../actions/streaming';\nimport { expandCommunityTimeline } from '../../actions/timelines';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport StatusListContainer from '../ui/containers/status_list_container';\n\nimport ColumnSettingsContainer from './containers/column_settings_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.community', defaultMessage: 'Local timeline' },\n});\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n  const onlyMedia = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'onlyMedia']) : state.getIn(['settings', 'community', 'other', 'onlyMedia']);\n  const timelineState = state.getIn(['timelines', `community${onlyMedia ? ':media' : ''}`]);\n\n  return {\n    hasUnread: !!timelineState && timelineState.get('unread') > 0,\n    onlyMedia,\n  };\n};\n\nclass CommunityTimeline extends PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n    identity: PropTypes.object,\n  };\n\n  static defaultProps = {\n    onlyMedia: false,\n  };\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    onlyMedia: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch, onlyMedia } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('COMMUNITY', { other: { onlyMedia } }));\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  componentDidMount () {\n    const { dispatch, onlyMedia } = this.props;\n    const { signedIn } = this.context.identity;\n\n    dispatch(expandCommunityTimeline({ onlyMedia }));\n\n    if (signedIn) {\n      this.disconnect = dispatch(connectCommunityStream({ onlyMedia }));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { signedIn } = this.context.identity;\n\n    if (prevProps.onlyMedia !== this.props.onlyMedia) {\n      const { dispatch, onlyMedia } = this.props;\n\n      if (this.disconnect) {\n        this.disconnect();\n      }\n\n      dispatch(expandCommunityTimeline({ onlyMedia }));\n\n      if (signedIn) {\n        this.disconnect = dispatch(connectCommunityStream({ onlyMedia }));\n      }\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleLoadMore = maxId => {\n    const { dispatch, onlyMedia } = this.props;\n\n    dispatch(expandCommunityTimeline({ maxId, onlyMedia }));\n  };\n\n  render () {\n    const { intl, hasUnread, columnId, multiColumn, onlyMedia } = this.props;\n    const pinned = !!columnId;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='users'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <ColumnSettingsContainer columnId={columnId} />\n        </ColumnHeader>\n\n        <StatusListContainer\n          prepend={<DismissableBanner id='community_timeline'><FormattedMessage id='dismissable_banner.community_timeline' defaultMessage='These are the most recent public posts from people whose accounts are hosted by {domain}.' values={{ domain }} /></DismissableBanner>}\n          trackScroll={!pinned}\n          scrollKey={`community_timeline-${columnId}`}\n          timelineId={`community${onlyMedia ? ':media' : ''}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.community' defaultMessage='The local timeline is empty. Write something publicly to get the ball rolling!' />}\n          bindToDocument={!multiColumn}\n        />\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(CommunityTimeline));\n"],"sourceRoot":""}