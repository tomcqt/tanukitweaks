{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/blocks/index.jsx"],"names":["messages","defineMessages","heading","id","defaultMessage","Blocks","ImmutablePureComponent","constructor","arguments","handleLoadMore","_debounce","this","props","dispatch","expandBlocks","leading","UNSAFE_componentWillMount","fetchBlocks","render","intl","accountIds","hasMore","multiColumn","isLoading","_jsx","Column","LoadingIndicator","emptyMessage","FormattedMessage","bindToDocument","icon","formatMessage","ColumnBackButtonSlim","ScrollableList","scrollKey","onLoadMore","map","AccountContainer","defaultAction","propTypes","params","PropTypes","object","isRequired","func","ImmutablePropTypes","list","bool","connect","state","getIn","injectIntl"],"mappings":"+PAiBA,MAAMA,EAAWC,YAAe,CAC9BC,QAAS,CAAEC,GAAG,gBAAkBC,eAAe,mBASjD,MAAMC,UAAeC,IAAuBC,cAAA,SAAAC,WAAA,KAgB1CC,eAAiBC,KAAS,KACxBC,KAAKC,MAAMC,SAASC,cAAe,GAClC,IAAK,CAAEC,SAAS,GAAQ,CAN3BC,4BACEL,KAAKC,MAAMC,SAASI,cACtB,CAMAC,SACE,MAAM,KAAEC,EAAI,WAAEC,EAAU,QAAEC,EAAO,YAAEC,EAAW,UAAEC,GAAcZ,KAAKC,MAEnE,IAAKQ,EACH,OACEI,YAACC,IAAM,UACLD,YAACE,IAAgB,KAKvB,MAAMC,EAAeH,YAACI,IAAgB,CAACzB,GAAE,sBAAuBC,eAAe,uCAE/E,OACEoB,YAACC,IAAM,CAACI,gBAAiBP,EAAaQ,KAAK,MAAM5B,QAASiB,EAAKY,cAAc/B,EAASE,eAAS,EAC7FsB,YAACQ,IAAoB,IACrBR,YAACS,IAAc,CACbC,UAAU,SACVC,WAAYxB,KAAKF,eACjBY,QAASA,EACTE,UAAWA,EACXI,aAAcA,EACdE,gBAAiBP,QAAY,EAE5BF,EAAWgB,KAAIjC,GACdqB,YAACa,IAAgB,CAAUlC,GAAIA,EAAImC,cAAc,SAA1BnC,MAKjC,EAlDIE,EAEGkC,UAAY,CACjBC,OAAQC,IAAUC,OAAOC,WACzB9B,SAAU4B,IAAUG,KAAKD,WACzBvB,WAAYyB,IAAmBC,KAC/BzB,QAASoB,IAAUM,KACnBxB,UAAWkB,IAAUM,KACrB5B,KAAMsB,IAAUC,OAAOC,WACvBrB,YAAamB,IAAUM,MA6CZC,6BA5DSC,IAAK,CAC3B7B,WAAY6B,EAAMC,MAAM,CAAC,aAAc,SAAU,UACjD7B,UAAW4B,EAAMC,MAAM,CAAC,aAAc,SAAU,SAChD3B,UAAW0B,EAAMC,MAAM,CAAC,aAAc,SAAU,cAAc,MAyDjDF,CAAyBG,YAAW9C,G","file":"js/features/blocks-0b4aee8b35b896fe8344.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { debounce } from 'lodash';\n\nimport { fetchBlocks, expandBlocks } from '../../actions/blocks';\nimport ColumnBackButtonSlim from '../../components/column_back_button_slim';\nimport { LoadingIndicator } from '../../components/loading_indicator';\nimport ScrollableList from '../../components/scrollable_list';\nimport AccountContainer from '../../containers/account_container';\nimport Column from '../ui/components/column';\n\nconst messages = defineMessages({\n  heading: { id: 'column.blocks', defaultMessage: 'Blocked users' },\n});\n\nconst mapStateToProps = state => ({\n  accountIds: state.getIn(['user_lists', 'blocks', 'items']),\n  hasMore: !!state.getIn(['user_lists', 'blocks', 'next']),\n  isLoading: state.getIn(['user_lists', 'blocks', 'isLoading'], true),\n});\n\nclass Blocks extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n  };\n\n  UNSAFE_componentWillMount () {\n    this.props.dispatch(fetchBlocks());\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandBlocks());\n  }, 300, { leading: true });\n\n  render () {\n    const { intl, accountIds, hasMore, multiColumn, isLoading } = this.props;\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.blocks' defaultMessage=\"You haven't blocked any users yet.\" />;\n\n    return (\n      <Column bindToDocument={!multiColumn} icon='ban' heading={intl.formatMessage(messages.heading)}>\n        <ColumnBackButtonSlim />\n        <ScrollableList\n          scrollKey='blocks'\n          onLoadMore={this.handleLoadMore}\n          hasMore={hasMore}\n          isLoading={isLoading}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {accountIds.map(id =>\n            <AccountContainer key={id} id={id} defaultAction='block' />,\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(Blocks));\n"],"sourceRoot":""}