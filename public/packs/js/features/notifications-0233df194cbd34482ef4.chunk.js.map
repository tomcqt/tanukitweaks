{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/notifications/components/notifications_permission_banner.jsx","webpack:///./app/javascript/mastodon/features/notifications/components/clear_column_button.jsx","webpack:///./app/javascript/mastodon/features/notifications/components/grant_permission_button.jsx","webpack:///./app/javascript/mastodon/features/notifications/components/column_settings.jsx","webpack:///./app/javascript/mastodon/features/notifications/containers/column_settings_container.js","webpack:///./app/javascript/mastodon/features/notifications/components/filter_bar.jsx","webpack:///./app/javascript/mastodon/features/notifications/containers/filter_bar_container.js","webpack:///./app/javascript/mastodon/features/notifications/components/follow_request.jsx","webpack:///./app/javascript/mastodon/features/notifications/containers/follow_request_container.js","webpack:///./app/javascript/mastodon/features/notifications/components/report.jsx","webpack:///./app/javascript/mastodon/features/notifications/components/notification.jsx","webpack:///./app/javascript/mastodon/features/notifications/containers/notification_container.js","webpack:///./app/javascript/mastodon/features/notifications/index.jsx"],"names":["messages","defineMessages","close","id","defaultMessage","NotificationsPermissionBanner","PureComponent","constructor","arguments","handleClick","this","props","dispatch","requestBrowserPermission","handleClose","changeSetting","render","intl","_jsx","className","IconButton","icon","onClick","title","formatMessage","FormattedMessage","values","Icon","Button","connect","injectIntl","ClearColumnButton","tabIndex","GrantPermissionButton","ColumnSettings","onPushChange","path","checked","onChange","settings","pushSettings","onClear","alertsEnabled","browserSupport","browserPermission","onRequestNotificationPermission","unreadMarkersShowStr","filterBarShowStr","filterAdvancedStr","alertStr","showStr","soundStr","showPushSettings","get","pushStr","role","SettingToggle","prefix","settingPath","label","disabled","context","identity","permissions","PERMISSION_MANAGE_USERS","PERMISSION_MANAGE_REPORTS","contextTypes","PropTypes","object","clearMessage","clearConfirm","permissionDenied","state","getIn","includes","mapDispatchToProps","_ref","window","Notification","permission","changePushNotifications","slice","showAlert","message","setFilter","openModal","modalType","modalProps","confirm","onConfirm","clearNotifications","tooltips","mentions","favourites","boosts","polls","follows","statuses","FilterBar","notificationType","selectFilter","selectedFilter","advancedMode","fixedWidth","newActiveFilter","authorize","reject","FollowRequest","ImmutablePureComponent","hidden","account","onAuthorize","onReject","_jsxs","_Fragment","children","Link","to","Avatar","size","DisplayName","propTypes","ImmutablePropTypes","map","isRequired","func","makeMapStateToProps","getAccount","makeGetAccount","mapStateToProps","authorizeFollowRequest","rejectFollowRequest","openReport","other","spam","legal","violation","Report","report","_jsx2","AvatarOverlay","friend","RelativeTimestamp","timestamp","short","count","href","target","rel","bool","favourite","follow","ownPoll","poll","reblog","status","update","adminSignUp","adminReport","notificationForScreenReader","output","push","formatDate","hour","minute","month","day","join","handleMoveUp","notification","onMoveUp","handleMoveDown","onMoveDown","handleOpen","router","history","handleOpenProfile","handleMention","e","preventDefault","onMention","handleHotkeyFavourite","onFavourite","handleHotkeyBoost","onReblog","handleHotkeyToggleHidden","onToggleHidden","getHandlers","reply","boost","mention","open","openProfile","moveUp","moveDown","toggleHidden","renderFollow","link","unread","HotKeys","handlers","classNames","name","AccountContainer","renderFollowRequest","FollowRequestContainer","withNote","renderMention","StatusContainer","withDismiss","contextType","getScrollPosition","updateScrollBottom","cachedMediaWidth","cacheMediaWidth","renderFavourite","muted","renderReblog","renderStatus","renderUpdate","renderPoll","me","renderAdminSignUp","renderAdminReport","targetAccount","targetDisplayNameHtml","__html","targetLink","dangerouslySetInnerHTML","displayNameHtml","number","getNotification","makeGetNotification","getStatus","makeGetStatus","getReport","makeGetReport","accountId","mentionCompose","onModalReblog","privacy","unreblog","shiftKey","boostModal","initBoostModal","unfavourite","revealStatus","hideStatus","markAsRead","getExcludedTypes","createSelector","shows","ImmutableList","filter","item","keys","getNotifications","showFilterBar","allowedType","excludedTypes","notifications","filterNot","Notifications","handleLoadGap","maxId","expandNotifications","handleLoadOlder","_debounce","last","leading","handleLoadPending","loadPending","handleScrollToTop","scrollTopNotifications","handleScroll","handlePin","columnId","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setColumnRef","c","elementIndex","findIndex","_selectChild","handleMarkAsRead","markNotificationsAsRead","submitMarkers","immediate","UNSAFE_componentWillMount","mountNotifications","componentWillUnmount","cancel","unmountNotifications","index","align_top","container","node","element","querySelector","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","isLoading","isUnread","multiColumn","hasMore","numPending","lastReadId","canMarkAsRead","needsNotificationPermission","pinned","emptyMessage","signedIn","scrollableContent","filterBarContainer","FilterBarContainer","scrollContainer","LoadGap","NotificationContainer","compareId","ScrollableList","scrollKey","trackScroll","showLoading","prepend","alwaysPrepend","onLoadMore","onLoadPending","onScrollToTop","onScroll","bindToDocument","NotSignedInIndicator","extraButton","Column","ref","ColumnHeader","active","onPin","onMove","ColumnSettingsContainer","Helmet","content","defaultProps","some"],"mappings":"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","file":"js/features/notifications-0233df194cbd34482ef4.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { connect } from 'react-redux';\n\nimport { requestBrowserPermission } from 'mastodon/actions/notifications';\nimport { changeSetting } from 'mastodon/actions/settings';\nimport Button from 'mastodon/components/button';\nimport { Icon }  from 'mastodon/components/icon';\nimport { IconButton } from 'mastodon/components/icon_button';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n});\n\nclass NotificationsPermissionBanner extends PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleClick = () => {\n    this.props.dispatch(requestBrowserPermission());\n  };\n\n  handleClose = () => {\n    this.props.dispatch(changeSetting(['notifications', 'dismissPermissionBanner'], true));\n  };\n\n  render () {\n    const { intl } = this.props;\n\n    return (\n      <div className='notifications-permission-banner'>\n        <div className='notifications-permission-banner__close'>\n          <IconButton icon='times' onClick={this.handleClose} title={intl.formatMessage(messages.close)} />\n        </div>\n\n        <h2><FormattedMessage id='notifications_permission_banner.title' defaultMessage='Never miss a thing' /></h2>\n        <p><FormattedMessage id='notifications_permission_banner.how_to_control' defaultMessage=\"To receive notifications when Mastodon isn't open, enable desktop notifications. You can control precisely which types of interactions generate desktop notifications through the {icon} button above once they're enabled.\" values={{ icon: <Icon id='sliders' /> }} /></p>\n        <Button onClick={this.handleClick}><FormattedMessage id='notifications_permission_banner.enable' defaultMessage='Enable desktop notifications' /></Button>\n      </div>\n    );\n  }\n\n}\n\nexport default connect()(injectIntl(NotificationsPermissionBanner));\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { Icon }  from 'mastodon/components/icon';\n\nexport default class ClearColumnButton extends PureComponent {\n\n  static propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };\n\n  render () {\n    return (\n      <button className='text-btn column-header__setting-btn' tabIndex={0} onClick={this.props.onClick}><Icon id='eraser' /> <FormattedMessage id='notifications.clear' defaultMessage='Clear notifications' /></button>\n    );\n  }\n\n}\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nexport default class GrantPermissionButton extends PureComponent {\n\n  static propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };\n\n  render () {\n    return (\n      <button className='text-btn column-header__permission-btn' tabIndex={0} onClick={this.props.onClick}>\n        <FormattedMessage id='notifications.grant_permission' defaultMessage='Grant permission.' />\n      </button>\n    );\n  }\n\n}\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport { PERMISSION_MANAGE_USERS, PERMISSION_MANAGE_REPORTS } from 'mastodon/permissions';\n\nimport ClearColumnButton from './clear_column_button';\nimport GrantPermissionButton from './grant_permission_button';\nimport SettingToggle from './setting_toggle';\n\nexport default class ColumnSettings extends PureComponent {\n\n  static contextTypes = {\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    pushSettings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n    onRequestNotificationPermission: PropTypes.func,\n    alertsEnabled: PropTypes.bool,\n    browserSupport: PropTypes.bool,\n    browserPermission: PropTypes.string,\n  };\n\n  onPushChange = (path, checked) => {\n    this.props.onChange(['push', ...path], checked);\n  };\n\n  render () {\n    const { settings, pushSettings, onChange, onClear, alertsEnabled, browserSupport, browserPermission, onRequestNotificationPermission } = this.props;\n\n    const unreadMarkersShowStr = <FormattedMessage id='notifications.column_settings.unread_notifications.highlight' defaultMessage='Highlight unread notifications' />;\n    const filterBarShowStr = <FormattedMessage id='notifications.column_settings.filter_bar.show_bar' defaultMessage='Show filter bar' />;\n    const filterAdvancedStr = <FormattedMessage id='notifications.column_settings.filter_bar.advanced' defaultMessage='Display all categories' />;\n    const alertStr = <FormattedMessage id='notifications.column_settings.alert' defaultMessage='Desktop notifications' />;\n    const showStr = <FormattedMessage id='notifications.column_settings.show' defaultMessage='Show in column' />;\n    const soundStr = <FormattedMessage id='notifications.column_settings.sound' defaultMessage='Play sound' />;\n\n    const showPushSettings = pushSettings.get('browserSupport') && pushSettings.get('isSubscribed');\n    const pushStr = showPushSettings && <FormattedMessage id='notifications.column_settings.push' defaultMessage='Push notifications' />;\n\n    return (\n      <div>\n        {alertsEnabled && browserSupport && browserPermission === 'denied' && (\n          <div className='column-settings__row column-settings__row--with-margin'>\n            <span className='warning-hint'><FormattedMessage id='notifications.permission_denied' defaultMessage='Desktop notifications are unavailable due to previously denied browser permissions request' /></span>\n          </div>\n        )}\n\n        {alertsEnabled && browserSupport && browserPermission === 'default' && (\n          <div className='column-settings__row column-settings__row--with-margin'>\n            <span className='warning-hint'>\n              <FormattedMessage id='notifications.permission_required' defaultMessage='Desktop notifications are unavailable because the required permission has not been granted.' /> <GrantPermissionButton onClick={onRequestNotificationPermission} />\n            </span>\n          </div>\n        )}\n\n        <div className='column-settings__row'>\n          <ClearColumnButton onClick={onClear} />\n        </div>\n\n        <div role='group' aria-labelledby='notifications-unread-markers'>\n          <span id='notifications-unread-markers' className='column-settings__section'>\n            <FormattedMessage id='notifications.column_settings.unread_notifications.category' defaultMessage='Unread notifications' />\n          </span>\n\n          <div className='column-settings__row'>\n            <SettingToggle id='unread-notification-markers' prefix='notifications' settings={settings} settingPath={['showUnread']} onChange={onChange} label={unreadMarkersShowStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-filter-bar'>\n          <span id='notifications-filter-bar' className='column-settings__section'>\n            <FormattedMessage id='notifications.column_settings.filter_bar.category' defaultMessage='Quick filter bar' />\n          </span>\n\n          <div className='column-settings__row'>\n            <SettingToggle id='show-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'show']} onChange={onChange} label={filterBarShowStr} />\n            <SettingToggle id='show-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'advanced']} onChange={onChange} label={filterAdvancedStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-follow'>\n          <span id='notifications-follow' className='column-settings__section'><FormattedMessage id='notifications.column_settings.follow' defaultMessage='New followers:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'follow']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'follow']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'follow']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'follow']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-follow-request'>\n          <span id='notifications-follow-request' className='column-settings__section'><FormattedMessage id='notifications.column_settings.follow_request' defaultMessage='New follow requests:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'follow_request']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'follow_request']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'follow_request']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'follow_request']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-favourite'>\n          <span id='notifications-favourite' className='column-settings__section'><FormattedMessage id='notifications.column_settings.favourite' defaultMessage='Favorites:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'favourite']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'favourite']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'favourite']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'favourite']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-mention'>\n          <span id='notifications-mention' className='column-settings__section'><FormattedMessage id='notifications.column_settings.mention' defaultMessage='Mentions:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'mention']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'mention']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'mention']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'mention']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-reblog'>\n          <span id='notifications-reblog' className='column-settings__section'><FormattedMessage id='notifications.column_settings.reblog' defaultMessage='Boosts:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'reblog']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'reblog']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'reblog']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'reblog']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-poll'>\n          <span id='notifications-poll' className='column-settings__section'><FormattedMessage id='notifications.column_settings.poll' defaultMessage='Poll results:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'poll']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'poll']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'poll']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'poll']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-status'>\n          <span id='notifications-status' className='column-settings__section'><FormattedMessage id='notifications.column_settings.status' defaultMessage='New posts:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'status']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'status']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'status']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'status']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-update'>\n          <span id='notifications-update' className='column-settings__section'><FormattedMessage id='notifications.column_settings.update' defaultMessage='Edits:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'update']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'update']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'update']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'update']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        {((this.context.identity.permissions & PERMISSION_MANAGE_USERS) === PERMISSION_MANAGE_USERS) && (\n          <div role='group' aria-labelledby='notifications-admin-sign-up'>\n            <span id='notifications-status' className='column-settings__section'><FormattedMessage id='notifications.column_settings.admin.sign_up' defaultMessage='New sign-ups:' /></span>\n\n            <div className='column-settings__row'>\n              <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'admin.sign_up']} onChange={onChange} label={alertStr} />\n              {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'admin.sign_up']} onChange={this.onPushChange} label={pushStr} />}\n              <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'admin.sign_up']} onChange={onChange} label={showStr} />\n              <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'admin.sign_up']} onChange={onChange} label={soundStr} />\n            </div>\n          </div>\n        )}\n\n        {((this.context.identity.permissions & PERMISSION_MANAGE_REPORTS) === PERMISSION_MANAGE_REPORTS) && (\n          <div role='group' aria-labelledby='notifications-admin-report'>\n            <span id='notifications-status' className='column-settings__section'><FormattedMessage id='notifications.column_settings.admin.report' defaultMessage='New reports:' /></span>\n\n            <div className='column-settings__row'>\n              <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'admin.report']} onChange={onChange} label={alertStr} />\n              {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'admin.report']} onChange={this.onPushChange} label={pushStr} />}\n              <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'admin.report']} onChange={onChange} label={showStr} />\n              <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'admin.report']} onChange={onChange} label={soundStr} />\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n}\n","import { defineMessages, injectIntl } from 'react-intl';\n\nimport { connect } from 'react-redux';\n\nimport { showAlert } from '../../../actions/alerts';\nimport { openModal } from '../../../actions/modal';\nimport { setFilter, clearNotifications, requestBrowserPermission } from '../../../actions/notifications';\nimport { changeAlerts as changePushNotifications } from '../../../actions/push_notifications';\nimport { changeSetting } from '../../../actions/settings';\nimport ColumnSettings from '../components/column_settings';\n\nconst messages = defineMessages({\n  clearMessage: { id: 'notifications.clear_confirmation', defaultMessage: 'Are you sure you want to permanently clear all your notifications?' },\n  clearConfirm: { id: 'notifications.clear', defaultMessage: 'Clear notifications' },\n  permissionDenied: { id: 'notifications.permission_denied_alert', defaultMessage: 'Desktop notifications can\\'t be enabled, as browser permission has been denied before' },\n});\n\nconst mapStateToProps = state => ({\n  settings: state.getIn(['settings', 'notifications']),\n  pushSettings: state.get('push_notifications'),\n  alertsEnabled: state.getIn(['settings', 'notifications', 'alerts']).includes(true),\n  browserSupport: state.getIn(['notifications', 'browserSupport']),\n  browserPermission: state.getIn(['notifications', 'browserPermission']),\n});\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n\n  onChange (path, checked) {\n    if (path[0] === 'push') {\n      if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n        dispatch(requestBrowserPermission((permission) => {\n          if (permission === 'granted') {\n            dispatch(changePushNotifications(path.slice(1), checked));\n          } else {\n            dispatch(showAlert({ message: messages.permissionDenied }));\n          }\n        }));\n      } else {\n        dispatch(changePushNotifications(path.slice(1), checked));\n      }\n    } else if (path[0] === 'quickFilter') {\n      dispatch(changeSetting(['notifications', ...path], checked));\n      dispatch(setFilter('all'));\n    } else if (path[0] === 'alerts' && checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n      if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n        dispatch(requestBrowserPermission((permission) => {\n          if (permission === 'granted') {\n            dispatch(changeSetting(['notifications', ...path], checked));\n          } else {\n            dispatch(showAlert({ message: messages.permissionDenied }));\n          }\n        }));\n      } else {\n        dispatch(changeSetting(['notifications', ...path], checked));\n      }\n    } else {\n      dispatch(changeSetting(['notifications', ...path], checked));\n    }\n  },\n\n  onClear () {\n    dispatch(openModal({\n      modalType: 'CONFIRM',\n      modalProps: {\n        message: intl.formatMessage(messages.clearMessage),\n        confirm: intl.formatMessage(messages.clearConfirm),\n        onConfirm: () => dispatch(clearNotifications()),\n      },\n    }));\n  },\n\n  onRequestNotificationPermission () {\n    dispatch(requestBrowserPermission());\n  },\n\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(ColumnSettings));\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Icon }  from 'mastodon/components/icon';\n\nconst tooltips = defineMessages({\n  mentions: { id: 'notifications.filter.mentions', defaultMessage: 'Mentions' },\n  favourites: { id: 'notifications.filter.favourites', defaultMessage: 'Favorites' },\n  boosts: { id: 'notifications.filter.boosts', defaultMessage: 'Boosts' },\n  polls: { id: 'notifications.filter.polls', defaultMessage: 'Poll results' },\n  follows: { id: 'notifications.filter.follows', defaultMessage: 'Follows' },\n  statuses: { id: 'notifications.filter.statuses', defaultMessage: 'Updates from people you follow' },\n});\n\nclass FilterBar extends PureComponent {\n\n  static propTypes = {\n    selectFilter: PropTypes.func.isRequired,\n    selectedFilter: PropTypes.string.isRequired,\n    advancedMode: PropTypes.bool.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  onClick (notificationType) {\n    return () => this.props.selectFilter(notificationType);\n  }\n\n  render () {\n    const { selectedFilter, advancedMode, intl } = this.props;\n    const renderedElement = !advancedMode ? (\n      <div className='notification__filter-bar'>\n        <button\n          className={selectedFilter === 'all' ? 'active' : ''}\n          onClick={this.onClick('all')}\n        >\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </button>\n        <button\n          className={selectedFilter === 'mention' ? 'active' : ''}\n          onClick={this.onClick('mention')}\n        >\n          <FormattedMessage\n            id='notifications.filter.mentions'\n            defaultMessage='Mentions'\n          />\n        </button>\n      </div>\n    ) : (\n      <div className='notification__filter-bar'>\n        <button\n          className={selectedFilter === 'all' ? 'active' : ''}\n          onClick={this.onClick('all')}\n        >\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </button>\n        <button\n          className={selectedFilter === 'mention' ? 'active' : ''}\n          onClick={this.onClick('mention')}\n          title={intl.formatMessage(tooltips.mentions)}\n        >\n          <Icon id='reply-all' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'favourite' ? 'active' : ''}\n          onClick={this.onClick('favourite')}\n          title={intl.formatMessage(tooltips.favourites)}\n        >\n          <Icon id='star' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'reblog' ? 'active' : ''}\n          onClick={this.onClick('reblog')}\n          title={intl.formatMessage(tooltips.boosts)}\n        >\n          <Icon id='retweet' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'poll' ? 'active' : ''}\n          onClick={this.onClick('poll')}\n          title={intl.formatMessage(tooltips.polls)}\n        >\n          <Icon id='tasks' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'status' ? 'active' : ''}\n          onClick={this.onClick('status')}\n          title={intl.formatMessage(tooltips.statuses)}\n        >\n          <Icon id='home' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'follow' ? 'active' : ''}\n          onClick={this.onClick('follow')}\n          title={intl.formatMessage(tooltips.follows)}\n        >\n          <Icon id='user-plus' fixedWidth />\n        </button>\n      </div>\n    );\n    return renderedElement;\n  }\n\n}\n\nexport default injectIntl(FilterBar);\n","import { connect } from 'react-redux';\n\nimport { setFilter } from '../../../actions/notifications';\nimport FilterBar from '../components/filter_bar';\n\nconst makeMapStateToProps = state => ({\n  selectedFilter: state.getIn(['settings', 'notifications', 'quickFilter', 'active']),\n  advancedMode: state.getIn(['settings', 'notifications', 'quickFilter', 'advanced']),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  selectFilter (newActiveFilter) {\n    dispatch(setFilter(newActiveFilter));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(FilterBar);\n","import PropTypes from 'prop-types';\n\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { Link } from 'react-router-dom';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nimport { Avatar } from 'mastodon/components/avatar';\nimport { DisplayName } from 'mastodon/components/display_name';\nimport { IconButton } from 'mastodon/components/icon_button';\n\nconst messages = defineMessages({\n  authorize: { id: 'follow_request.authorize', defaultMessage: 'Authorize' },\n  reject: { id: 'follow_request.reject', defaultMessage: 'Reject' },\n});\n\nclass FollowRequest extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    onAuthorize: PropTypes.func.isRequired,\n    onReject: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { intl, hidden, account, onAuthorize, onReject } = this.props;\n\n    if (!account) {\n      return <div />;\n    }\n\n    if (hidden) {\n      return (\n        <>\n          {account.get('display_name')}\n          {account.get('username')}\n        </>\n      );\n    }\n\n    return (\n      <div className='account'>\n        <div className='account__wrapper'>\n          <Link key={account.get('id')} className='account__display-name' title={account.get('acct')} to={`/@${account.get('acct')}`}>\n            <div className='account__avatar-wrapper'><Avatar account={account} size={36} /></div>\n            <DisplayName account={account} />\n          </Link>\n\n          <div className='account__relationship'>\n            <IconButton title={intl.formatMessage(messages.authorize)} icon='check' onClick={onAuthorize} />\n            <IconButton title={intl.formatMessage(messages.reject)} icon='times' onClick={onReject} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default injectIntl(FollowRequest);\n","import { connect } from 'react-redux';\n\nimport { authorizeFollowRequest, rejectFollowRequest } from 'mastodon/actions/accounts';\nimport { makeGetAccount } from 'mastodon/selectors';\n\nimport FollowRequest from '../components/follow_request';\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, props) => ({\n    account: getAccount(state, props.id),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { id }) => ({\n  onAuthorize () {\n    dispatch(authorizeFollowRequest(id));\n  },\n\n  onReject () {\n    dispatch(rejectFollowRequest(id));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(FollowRequest);\n","import PropTypes from 'prop-types';\n\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nimport { AvatarOverlay } from 'mastodon/components/avatar_overlay';\nimport { RelativeTimestamp } from 'mastodon/components/relative_timestamp';\n\n// This needs to be kept in sync with app/models/report.rb\nconst messages = defineMessages({\n  openReport: { id: 'report_notification.open', defaultMessage: 'Open report' },\n  other: { id: 'report_notification.categories.other', defaultMessage: 'Other' },\n  spam: { id: 'report_notification.categories.spam', defaultMessage: 'Spam' },\n  legal: { id: 'report_notification.categories.legal', defaultMessage: 'Legal' },\n  violation: { id: 'report_notification.categories.violation', defaultMessage: 'Rule violation' },\n});\n\nclass Report extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    report: ImmutablePropTypes.map.isRequired,\n    hidden: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { intl, hidden, report, account } = this.props;\n\n    if (!report) {\n      return null;\n    }\n\n    if (hidden) {\n      return (\n        <>\n          {report.get('id')}\n        </>\n      );\n    }\n\n    return (\n      <div className='notification__report'>\n        <div className='notification__report__avatar'>\n          <AvatarOverlay account={report.get('target_account')} friend={account} />\n        </div>\n\n        <div className='notification__report__details'>\n          <div>\n            <RelativeTimestamp timestamp={report.get('created_at')} short={false} /> · <FormattedMessage id='report_notification.attached_statuses' defaultMessage='{count, plural, one {# post} other {# posts}} attached' values={{ count: report.get('status_ids').size }} />\n            <br />\n            <strong>{intl.formatMessage(messages[report.get('category')])}</strong>\n          </div>\n\n          <div className='notification__report__actions'>\n            <a href={`/admin/reports/${report.get('id')}`} className='button' target='_blank' rel='noopener noreferrer'>{intl.formatMessage(messages.openReport)}</a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default injectIntl(Report);\n","import PropTypes from 'prop-types';\n\nimport { injectIntl, FormattedMessage, defineMessages } from 'react-intl';\n\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nimport { HotKeys } from 'react-hotkeys';\n\nimport { Icon }  from 'mastodon/components/icon';\nimport AccountContainer from 'mastodon/containers/account_container';\nimport StatusContainer from 'mastodon/containers/status_container';\nimport { me } from 'mastodon/initial_state';\n\nimport FollowRequestContainer from '../containers/follow_request_container';\n\nimport Report from './report';\n\nconst messages = defineMessages({\n  favourite: { id: 'notification.favourite', defaultMessage: '{name} favorited your status' },\n  follow: { id: 'notification.follow', defaultMessage: '{name} followed you' },\n  ownPoll: { id: 'notification.own_poll', defaultMessage: 'Your poll has ended' },\n  poll: { id: 'notification.poll', defaultMessage: 'A poll you have voted in has ended' },\n  reblog: { id: 'notification.reblog', defaultMessage: '{name} boosted your status' },\n  status: { id: 'notification.status', defaultMessage: '{name} just posted' },\n  update: { id: 'notification.update', defaultMessage: '{name} edited a post' },\n  adminSignUp: { id: 'notification.admin.sign_up', defaultMessage: '{name} signed up' },\n  adminReport: { id: 'notification.admin.report', defaultMessage: '{name} reported {target}' },\n});\n\nconst notificationForScreenReader = (intl, message, timestamp) => {\n  const output = [message];\n\n  output.push(intl.formatDate(timestamp, { hour: '2-digit', minute: '2-digit', month: 'short', day: 'numeric' }));\n\n  return output.join(', ');\n};\n\nclass Notification extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    notification: ImmutablePropTypes.map.isRequired,\n    hidden: PropTypes.bool,\n    onMoveUp: PropTypes.func.isRequired,\n    onMoveDown: PropTypes.func.isRequired,\n    onMention: PropTypes.func.isRequired,\n    onFavourite: PropTypes.func.isRequired,\n    onReblog: PropTypes.func.isRequired,\n    onToggleHidden: PropTypes.func.isRequired,\n    status: ImmutablePropTypes.map,\n    intl: PropTypes.object.isRequired,\n    getScrollPosition: PropTypes.func,\n    updateScrollBottom: PropTypes.func,\n    cacheMediaWidth: PropTypes.func,\n    cachedMediaWidth: PropTypes.number,\n    unread: PropTypes.bool,\n  };\n\n  handleMoveUp = () => {\n    const { notification, onMoveUp } = this.props;\n    onMoveUp(notification.get('id'));\n  };\n\n  handleMoveDown = () => {\n    const { notification, onMoveDown } = this.props;\n    onMoveDown(notification.get('id'));\n  };\n\n  handleOpen = () => {\n    const { notification } = this.props;\n\n    if (notification.get('status')) {\n      this.context.router.history.push(`/@${notification.getIn(['status', 'account', 'acct'])}/${notification.get('status')}`);\n    } else {\n      this.handleOpenProfile();\n    }\n  };\n\n  handleOpenProfile = () => {\n    const { notification } = this.props;\n    this.context.router.history.push(`/@${notification.getIn(['account', 'acct'])}`);\n  };\n\n  handleMention = e => {\n    e.preventDefault();\n\n    const { notification, onMention } = this.props;\n    onMention(notification.get('account'), this.context.router.history);\n  };\n\n  handleHotkeyFavourite = () => {\n    const { status } = this.props;\n    if (status) this.props.onFavourite(status);\n  };\n\n  handleHotkeyBoost = e => {\n    const { status } = this.props;\n    if (status) this.props.onReblog(status, e);\n  };\n\n  handleHotkeyToggleHidden = () => {\n    const { status } = this.props;\n    if (status) this.props.onToggleHidden(status);\n  };\n\n  getHandlers () {\n    return {\n      reply: this.handleMention,\n      favourite: this.handleHotkeyFavourite,\n      boost: this.handleHotkeyBoost,\n      mention: this.handleMention,\n      open: this.handleOpen,\n      openProfile: this.handleOpenProfile,\n      moveUp: this.handleMoveUp,\n      moveDown: this.handleMoveDown,\n      toggleHidden: this.handleHotkeyToggleHidden,\n    };\n  }\n\n  renderFollow (notification, account, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-follow focusable', { unread })} tabIndex={0} aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.follow, { name: account.get('acct') }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='user-plus' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.follow' defaultMessage='{name} followed you' values={{ name: link }} />\n            </span>\n          </div>\n\n          <AccountContainer id={account.get('id')} hidden={this.props.hidden} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderFollowRequest (notification, account, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-follow-request focusable', { unread })} tabIndex={0} aria-label={notificationForScreenReader(intl, intl.formatMessage({ id: 'notification.follow_request', defaultMessage: '{name} has requested to follow you' }, { name: account.get('acct') }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='user' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.follow_request' defaultMessage='{name} has requested to follow you' values={{ name: link }} />\n            </span>\n          </div>\n\n          <FollowRequestContainer id={account.get('id')} withNote={false} hidden={this.props.hidden} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderMention (notification) {\n    return (\n      <StatusContainer\n        id={notification.get('status')}\n        withDismiss\n        hidden={this.props.hidden}\n        onMoveDown={this.handleMoveDown}\n        onMoveUp={this.handleMoveUp}\n        contextType='notifications'\n        getScrollPosition={this.props.getScrollPosition}\n        updateScrollBottom={this.props.updateScrollBottom}\n        cachedMediaWidth={this.props.cachedMediaWidth}\n        cacheMediaWidth={this.props.cacheMediaWidth}\n        unread={this.props.unread}\n      />\n    );\n  }\n\n  renderFavourite (notification, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-favourite focusable', { unread })} tabIndex={0} aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.favourite, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='star' className='star-icon' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.favourite' defaultMessage='{name} favorited your status' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={notification.get('account')}\n            muted\n            withDismiss\n            hidden={!!this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderReblog (notification, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-reblog focusable', { unread })} tabIndex={0} aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.reblog, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='retweet' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.reblog' defaultMessage='{name} boosted your status' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={notification.get('account')}\n            muted\n            withDismiss\n            hidden={this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderStatus (notification, link) {\n    const { intl, unread, status } = this.props;\n\n    if (!status) {\n      return null;\n    }\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-status focusable', { unread })} tabIndex={0} aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.status, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='home' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.status' defaultMessage='{name} just posted' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={notification.get('account')}\n            contextType='notifications'\n            muted\n            withDismiss\n            hidden={this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderUpdate (notification, link) {\n    const { intl, unread, status } = this.props;\n\n    if (!status) {\n      return null;\n    }\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-update focusable', { unread })} tabIndex={0} aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.update, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='pencil' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.update' defaultMessage='{name} edited a post' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={notification.get('account')}\n            contextType='notifications'\n            muted\n            withDismiss\n            hidden={this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderPoll (notification, account) {\n    const { intl, unread, status } = this.props;\n    const ownPoll  = me === account.get('id');\n    const message  = ownPoll ? intl.formatMessage(messages.ownPoll) : intl.formatMessage(messages.poll);\n\n    if (!status) {\n      return null;\n    }\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-poll focusable', { unread })} tabIndex={0} aria-label={notificationForScreenReader(intl, message, notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='tasks' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              {ownPoll ? (\n                <FormattedMessage id='notification.own_poll' defaultMessage='Your poll has ended' />\n              ) : (\n                <FormattedMessage id='notification.poll' defaultMessage='A poll you have voted in has ended' />\n              )}\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={account}\n            contextType='notifications'\n            muted\n            withDismiss\n            hidden={this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderAdminSignUp (notification, account, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-admin-sign-up focusable', { unread })} tabIndex={0} aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.adminSignUp, { name: account.get('acct') }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='user-plus' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.admin.sign_up' defaultMessage='{name} signed up' values={{ name: link }} />\n            </span>\n          </div>\n\n          <AccountContainer id={account.get('id')} hidden={this.props.hidden} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderAdminReport (notification, account, link) {\n    const { intl, unread, report } = this.props;\n\n    if (!report) {\n      return null;\n    }\n\n    const targetAccount = report.get('target_account');\n    const targetDisplayNameHtml = { __html: targetAccount.get('display_name_html') };\n    const targetLink = <bdi><Link className='notification__display-name' title={targetAccount.get('acct')} to={`/@${targetAccount.get('acct')}`} dangerouslySetInnerHTML={targetDisplayNameHtml} /></bdi>;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-admin-report focusable', { unread })} tabIndex={0} aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.adminReport, { name: account.get('acct'), target: notification.getIn(['report', 'target_account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='flag' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.admin.report' defaultMessage='{name} reported {target}' values={{ name: link, target: targetLink }} />\n            </span>\n          </div>\n\n          <Report account={account} report={notification.get('report')} hidden={this.props.hidden} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  render () {\n    const { notification } = this.props;\n    const account          = notification.get('account');\n    const displayNameHtml  = { __html: account.get('display_name_html') };\n    const link             = <bdi><Link className='notification__display-name' href={`/@${account.get('acct')}`} title={account.get('acct')} to={`/@${account.get('acct')}`} dangerouslySetInnerHTML={displayNameHtml} /></bdi>;\n\n    switch(notification.get('type')) {\n    case 'follow':\n      return this.renderFollow(notification, account, link);\n    case 'follow_request':\n      return this.renderFollowRequest(notification, account, link);\n    case 'mention':\n      return this.renderMention(notification);\n    case 'favourite':\n      return this.renderFavourite(notification, link);\n    case 'reblog':\n      return this.renderReblog(notification, link);\n    case 'status':\n      return this.renderStatus(notification, link);\n    case 'update':\n      return this.renderUpdate(notification, link);\n    case 'poll':\n      return this.renderPoll(notification, account);\n    case 'admin.sign_up':\n      return this.renderAdminSignUp(notification, account, link);\n    case 'admin.report':\n      return this.renderAdminReport(notification, account, link);\n    }\n\n    return null;\n  }\n\n}\n\nexport default injectIntl(Notification);\n","import { connect } from 'react-redux';\n\nimport { initBoostModal } from '../../../actions/boosts';\nimport { mentionCompose } from '../../../actions/compose';\nimport {\n  reblog,\n  favourite,\n  unreblog,\n  unfavourite,\n} from '../../../actions/interactions';\nimport {\n  hideStatus,\n  revealStatus,\n} from '../../../actions/statuses';\nimport { boostModal } from '../../../initial_state';\nimport { makeGetNotification, makeGetStatus, makeGetReport } from '../../../selectors';\nimport Notification from '../components/notification';\n\nconst makeMapStateToProps = () => {\n  const getNotification = makeGetNotification();\n  const getStatus = makeGetStatus();\n  const getReport = makeGetReport();\n\n  const mapStateToProps = (state, props) => {\n    const notification = getNotification(state, props.notification, props.accountId);\n    return {\n      notification: notification,\n      status: notification.get('status') ? getStatus(state, { id: notification.get('status'), contextType: 'notifications' }) : null,\n      report: notification.get('report') ? getReport(state, notification.get('report'), notification.getIn(['report', 'target_account', 'id'])) : null,\n    };\n  };\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onMention: (account, router) => {\n    dispatch(mentionCompose(account, router));\n  },\n\n  onModalReblog (status, privacy) {\n    dispatch(reblog(status, privacy));\n  },\n\n  onReblog (status, e) {\n    if (status.get('reblogged')) {\n      dispatch(unreblog(status));\n    } else {\n      if (e.shiftKey || !boostModal) {\n        this.onModalReblog(status);\n      } else {\n        dispatch(initBoostModal({ status, onReblog: this.onModalReblog }));\n      }\n    }\n  },\n\n  onFavourite (status) {\n    if (status.get('favourited')) {\n      dispatch(unfavourite(status));\n    } else {\n      dispatch(favourite(status));\n    }\n  },\n\n  onToggleHidden (status) {\n    if (status.get('hidden')) {\n      dispatch(revealStatus(status.get('id')));\n    } else {\n      dispatch(hideStatus(status.get('id')));\n    }\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(Notification);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport { debounce } from 'lodash';\n\nimport { compareId } from 'mastodon/compare_id';\nimport { Icon }  from 'mastodon/components/icon';\nimport { NotSignedInIndicator } from 'mastodon/components/not_signed_in_indicator';\n\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { submitMarkers } from '../../actions/markers';\nimport {\n  expandNotifications,\n  scrollTopNotifications,\n  loadPending,\n  mountNotifications,\n  unmountNotifications,\n  markNotificationsAsRead,\n} from '../../actions/notifications';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { LoadGap } from '../../components/load_gap';\nimport ScrollableList from '../../components/scrollable_list';\n\nimport NotificationsPermissionBanner from './components/notifications_permission_banner';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport FilterBarContainer from './containers/filter_bar_container';\nimport NotificationContainer from './containers/notification_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.notifications', defaultMessage: 'Notifications' },\n  markAsRead : { id: 'notifications.mark_as_read', defaultMessage: 'Mark every notification as read' },\n});\n\nconst getExcludedTypes = createSelector([\n  state => state.getIn(['settings', 'notifications', 'shows']),\n], (shows) => {\n  return ImmutableList(shows.filter(item => !item).keys());\n});\n\nconst getNotifications = createSelector([\n  state => state.getIn(['settings', 'notifications', 'quickFilter', 'show']),\n  state => state.getIn(['settings', 'notifications', 'quickFilter', 'active']),\n  getExcludedTypes,\n  state => state.getIn(['notifications', 'items']),\n], (showFilterBar, allowedType, excludedTypes, notifications) => {\n  if (!showFilterBar || allowedType === 'all') {\n    // used if user changed the notification settings after loading the notifications from the server\n    // otherwise a list of notifications will come pre-filtered from the backend\n    // we need to turn it off for FilterBar in order not to block ourselves from seeing a specific category\n    return notifications.filterNot(item => item !== null && excludedTypes.includes(item.get('type')));\n  }\n  return notifications.filter(item => item === null || allowedType === item.get('type'));\n});\n\nconst mapStateToProps = state => ({\n  showFilterBar: state.getIn(['settings', 'notifications', 'quickFilter', 'show']),\n  notifications: getNotifications(state),\n  isLoading: state.getIn(['notifications', 'isLoading'], 0) > 0,\n  isUnread: state.getIn(['notifications', 'unread']) > 0 || state.getIn(['notifications', 'pendingItems']).size > 0,\n  hasMore: state.getIn(['notifications', 'hasMore']),\n  numPending: state.getIn(['notifications', 'pendingItems'], ImmutableList()).size,\n  lastReadId: state.getIn(['settings', 'notifications', 'showUnread']) ? state.getIn(['notifications', 'readMarkerId']) : '0',\n  canMarkAsRead: state.getIn(['settings', 'notifications', 'showUnread']) && state.getIn(['notifications', 'readMarkerId']) !== '0' && getNotifications(state).some(item => item !== null && compareId(item.get('id'), state.getIn(['notifications', 'readMarkerId'])) > 0),\n  needsNotificationPermission: state.getIn(['settings', 'notifications', 'alerts']).includes(true) && state.getIn(['notifications', 'browserSupport']) && state.getIn(['notifications', 'browserPermission']) === 'default' && !state.getIn(['settings', 'notifications', 'dismissPermissionBanner']),\n});\n\nclass Notifications extends PureComponent {\n\n  static contextTypes = {\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    columnId: PropTypes.string,\n    notifications: ImmutablePropTypes.list.isRequired,\n    showFilterBar: PropTypes.bool.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    isLoading: PropTypes.bool,\n    isUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    numPending: PropTypes.number,\n    lastReadId: PropTypes.string,\n    canMarkAsRead: PropTypes.bool,\n    needsNotificationPermission: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    trackScroll: true,\n  };\n\n  UNSAFE_componentWillMount() {\n    this.props.dispatch(mountNotifications());\n  }\n\n  componentWillUnmount () {\n    this.handleLoadOlder.cancel();\n    this.handleScrollToTop.cancel();\n    this.handleScroll.cancel();\n    this.props.dispatch(scrollTopNotifications(false));\n    this.props.dispatch(unmountNotifications());\n  }\n\n  handleLoadGap = (maxId) => {\n    this.props.dispatch(expandNotifications({ maxId }));\n  };\n\n  handleLoadOlder = debounce(() => {\n    const last = this.props.notifications.last();\n    this.props.dispatch(expandNotifications({ maxId: last && last.get('id') }));\n  }, 300, { leading: true });\n\n  handleLoadPending = () => {\n    this.props.dispatch(loadPending());\n  };\n\n  handleScrollToTop = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(true));\n  }, 100);\n\n  handleScroll = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(false));\n  }, 100);\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('NOTIFICATIONS', {}));\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  setColumnRef = c => {\n    this.column = c;\n  };\n\n  handleMoveUp = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) - 1;\n    this._selectChild(elementIndex, true);\n  };\n\n  handleMoveDown = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) + 1;\n    this._selectChild(elementIndex, false);\n  };\n\n  _selectChild (index, align_top) {\n    const container = this.column.node;\n    const element = container.querySelector(`article:nth-of-type(${index + 1}) .focusable`);\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }\n\n  handleMarkAsRead = () => {\n    this.props.dispatch(markNotificationsAsRead());\n    this.props.dispatch(submitMarkers({ immediate: true }));\n  };\n\n  render () {\n    const { intl, notifications, isLoading, isUnread, columnId, multiColumn, hasMore, numPending, showFilterBar, lastReadId, canMarkAsRead, needsNotificationPermission } = this.props;\n    const pinned = !!columnId;\n    const emptyMessage = <FormattedMessage id='empty_column.notifications' defaultMessage=\"You don't have any notifications yet. When other people interact with you, you will see it here.\" />;\n    const { signedIn } = this.context.identity;\n\n    let scrollableContent = null;\n\n    const filterBarContainer = (signedIn && showFilterBar)\n      ? (<FilterBarContainer />)\n      : null;\n\n    if (isLoading && this.scrollableContent) {\n      scrollableContent = this.scrollableContent;\n    } else if (notifications.size > 0 || hasMore) {\n      scrollableContent = notifications.map((item, index) => item === null ? (\n        <LoadGap\n          key={'gap:' + notifications.getIn([index + 1, 'id'])}\n          disabled={isLoading}\n          maxId={index > 0 ? notifications.getIn([index - 1, 'id']) : null}\n          onClick={this.handleLoadGap}\n        />\n      ) : (\n        <NotificationContainer\n          key={item.get('id')}\n          notification={item}\n          accountId={item.get('account')}\n          onMoveUp={this.handleMoveUp}\n          onMoveDown={this.handleMoveDown}\n          unread={lastReadId !== '0' && compareId(item.get('id'), lastReadId) > 0}\n        />\n      ));\n    } else {\n      scrollableContent = null;\n    }\n\n    this.scrollableContent = scrollableContent;\n\n    let scrollContainer;\n\n    if (signedIn) {\n      scrollContainer = (\n        <ScrollableList\n          scrollKey={`notifications-${columnId}`}\n          trackScroll={!pinned}\n          isLoading={isLoading}\n          showLoading={isLoading && notifications.size === 0}\n          hasMore={hasMore}\n          numPending={numPending}\n          prepend={needsNotificationPermission && <NotificationsPermissionBanner />}\n          alwaysPrepend\n          emptyMessage={emptyMessage}\n          onLoadMore={this.handleLoadOlder}\n          onLoadPending={this.handleLoadPending}\n          onScrollToTop={this.handleScrollToTop}\n          onScroll={this.handleScroll}\n          bindToDocument={!multiColumn}\n        >\n          {scrollableContent}\n        </ScrollableList>\n      );\n    } else {\n      scrollContainer = <NotSignedInIndicator />;\n    }\n\n    let extraButton = null;\n\n    if (canMarkAsRead) {\n      extraButton = (\n        <button\n          aria-label={intl.formatMessage(messages.markAsRead)}\n          title={intl.formatMessage(messages.markAsRead)}\n          onClick={this.handleMarkAsRead}\n          className='column-header__button'\n        >\n          <Icon id='check' />\n        </button>\n      );\n    }\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setColumnRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='bell'\n          active={isUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          extraButton={extraButton}\n        >\n          <ColumnSettingsContainer />\n        </ColumnHeader>\n\n        {filterBarContainer}\n        {scrollContainer}\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(Notifications));\n"],"sourceRoot":""}