{"version":3,"sources":["webpack:///./app/javascript/mastodon/components/admin/Counter.jsx"],"names":["Counter","PureComponent","constructor","arguments","state","loading","data","componentDidMount","measure","start_at","end_at","params","this","props","api","post","keys","then","res","setState","catch","err","console","error","render","label","href","target","content","_jsxs","_Fragment","children","_jsx","className","Skeleton","width","percentChange","previous_total","percIncrease","a","b","percent","total","human_value","FormattedNumber","value","classNames","positive","negative","style","inner","Sparklines","height","map","x","SparklinesCurve"],"mappings":"mNA8Be,MAAMA,UAAgBC,gBAAcC,cAAA,SAAAC,WAAA,KAYjDC,MAAQ,CACNC,SAAS,EACTC,KAAM,KACN,CAEFC,oBACE,MAAM,QAAEC,EAAO,SAAEC,EAAQ,OAAEC,EAAM,OAAEC,GAAWC,KAAKC,MAEnDC,cAAMC,KAAK,yBAA0B,CAAEC,KAAM,CAACR,GAAUC,WAAUC,SAAQ,CAACF,GAAUG,IAAUM,MAAKC,IAClGN,KAAKO,SAAS,CACZd,SAAS,EACTC,KAAMY,EAAIZ,MACV,IACDc,OAAMC,IACPC,QAAQC,MAAMF,EAAI,GAEtB,CAEAG,SACE,MAAM,MAAEC,EAAK,KAAEC,EAAI,OAAEC,GAAWf,KAAKC,OAC/B,QAAER,EAAO,KAAEC,GAASM,KAAKR,MAE/B,IAAIwB,EAEJ,GAAIvB,EACFuB,EACEC,eAAAC,WAAA,CAAAC,SAAA,CACEC,YAAA,QAAMC,UAAU,gCAAyB,EAACD,YAACE,IAAQ,CAACC,MAAO,MAC3DH,YAAA,QAAMC,UAAU,iCAA0B,EAACD,YAACE,IAAQ,CAACC,MAAO,aAG3D,CACL,MAAM3B,EAAUF,EAAK,GACf8B,EAAgB5B,EAAQ6B,gBA/DfC,EAACC,EAAGC,KACvB,IAAIC,EAcJ,OAVIA,EAFM,IAAND,EACQ,IAAND,GACSC,EAAID,GAAKA,EAEV,EAEG,IAANC,GAAiB,IAAND,EACV,GAEE,EAGPE,CAAO,EAgDsCH,CAAsC,EAAzB9B,EAAQ6B,eAAoC,EAAhB7B,EAAQkC,OAEjGd,EACEC,eAAAC,WAAA,CAAAC,SAAA,CACEC,YAAA,QAAMC,UAAU,gCAAyB,EAAEzB,EAAQmC,aAAeX,YAACY,IAAe,CAACC,MAAOrC,EAAQkC,SACjGlC,EAAQ6B,gBAAmBL,YAAA,QAAMC,UAAWa,IAAW,2BAA4B,CAAEC,SAAUX,EAAgB,EAAGY,SAAUZ,EAAgB,UAAK,EAAEA,EAAgB,GAAK,IAAIJ,YAACY,IAAe,CAACC,MAAOT,EAAea,MAAM,eAGhO,CAEA,MAAMC,EACJrB,eAAAC,WAAA,CAAAC,SAAA,CACEC,YAAA,OAAKC,UAAU,yBAAkB,EAC9BL,GAGHI,YAAA,OAAKC,UAAU,yBAAkB,EAC9BR,GAGHO,YAAA,OAAKC,UAAU,yBAAkB,GAC7B5B,GACA2B,YAACmB,aAAU,CAAChB,MAAO,IAAKiB,OAAQ,GAAI9C,KAAMA,EAAK,GAAGA,KAAK+C,KAAIC,GAAe,EAAVA,EAAET,cAAW,EAC3Eb,YAACuB,kBAAe,SAO1B,OAAI7B,EAEAM,YAAA,KAAGN,KAAMA,EAAMO,UAAU,YAAYN,OAAQA,QAAO,EACjDuB,GAKHlB,YAAA,OAAKC,UAAU,kBAAW,EACvBiB,EAIT,E","file":"js/431-3c34897cfc51d098aa4d.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedNumber } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport { Sparklines, SparklinesCurve } from 'react-sparklines';\n\nimport api from 'mastodon/api';\nimport { Skeleton } from 'mastodon/components/skeleton';\n\nconst percIncrease = (a, b) => {\n  let percent;\n\n  if (b !== 0) {\n    if (a !== 0) {\n      percent = (b - a) / a;\n    } else {\n      percent = 1;\n    }\n  } else if (b === 0 && a === 0) {\n    percent = 0;\n  } else {\n    percent = - 1;\n  }\n\n  return percent;\n};\n\nexport default class Counter extends PureComponent {\n\n  static propTypes = {\n    measure: PropTypes.string.isRequired,\n    start_at: PropTypes.string.isRequired,\n    end_at: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    href: PropTypes.string,\n    params: PropTypes.object,\n    target: PropTypes.string,\n  };\n\n  state = {\n    loading: true,\n    data: null,\n  };\n\n  componentDidMount () {\n    const { measure, start_at, end_at, params } = this.props;\n\n    api().post('/api/v1/admin/measures', { keys: [measure], start_at, end_at, [measure]: params }).then(res => {\n      this.setState({\n        loading: false,\n        data: res.data,\n      });\n    }).catch(err => {\n      console.error(err);\n    });\n  }\n\n  render () {\n    const { label, href, target } = this.props;\n    const { loading, data } = this.state;\n\n    let content;\n\n    if (loading) {\n      content = (\n        <>\n          <span className='sparkline__value__total'><Skeleton width={43} /></span>\n          <span className='sparkline__value__change'><Skeleton width={43} /></span>\n        </>\n      );\n    } else {\n      const measure = data[0];\n      const percentChange = measure.previous_total && percIncrease(measure.previous_total * 1, measure.total * 1);\n\n      content = (\n        <>\n          <span className='sparkline__value__total'>{measure.human_value || <FormattedNumber value={measure.total} />}</span>\n          {measure.previous_total && (<span className={classNames('sparkline__value__change', { positive: percentChange > 0, negative: percentChange < 0 })}>{percentChange > 0 && '+'}<FormattedNumber value={percentChange} style='percent' /></span>)}\n        </>\n      );\n    }\n\n    const inner = (\n      <>\n        <div className='sparkline__value'>\n          {content}\n        </div>\n\n        <div className='sparkline__label'>\n          {label}\n        </div>\n\n        <div className='sparkline__graph'>\n          {!loading && (\n            <Sparklines width={259} height={55} data={data[0].data.map(x => x.value * 1)}>\n              <SparklinesCurve />\n            </Sparklines>\n          )}\n        </div>\n      </>\n    );\n\n    if (href) {\n      return (\n        <a href={href} className='sparkline' target={target}>\n          {inner}\n        </a>\n      );\n    } else {\n      return (\n        <div className='sparkline'>\n          {inner}\n        </div>\n      );\n    }\n  }\n\n}\n"],"sourceRoot":""}