{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/firehose/index.jsx"],"names":["messages","defineMessages","title","id","defaultMessage","ColumnSettings","dispatch","useAppDispatch","settings","useAppSelector","state","getIn","onChange","useCallback","key","checked","changeSetting","_jsx","className","SettingToggle","settingPath","label","FormattedMessage","Firehose","_ref","feedType","multiColumn","intl","useIntl","signedIn","initialState","meta","me","accountId","disabledAccountId","disabled_account_id","accessToken","access_token","permissions","role","columnRef","useRef","onlyMedia","hasUnread","handlePin","addColumn","other","onlyRemote","handleLoadMore","maxId","expandCommunityTimeline","expandPublicTimeline","handleHeaderClick","_columnRef$current","current","scrollTop","useEffect","disconnect","connectCommunityStream","connectPublicStream","DismissableBanner","domain","emptyMessage","_jsxs","Column","bindToDocument","ref","formatMessage","children","ColumnHeader","icon","active","onPin","onClick","StatusListContainer","timelineId","onLoadMore","trackScroll","scrollKey","Helmet","name","content"],"mappings":"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","file":"js/features/firehose-b6e2b24b2731a02f3ea6.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { useRef, useCallback, useEffect } from 'react';\n\nimport { useIntl, defineMessages, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\nimport { NavLink } from 'react-router-dom';\n\nimport { addColumn } from 'mastodon/actions/columns';\nimport { changeSetting } from 'mastodon/actions/settings';\nimport { connectPublicStream, connectCommunityStream } from 'mastodon/actions/streaming';\nimport { expandPublicTimeline, expandCommunityTimeline } from 'mastodon/actions/timelines';\nimport { DismissableBanner } from 'mastodon/components/dismissable_banner';\nimport initialState, { domain } from 'mastodon/initial_state';\nimport { useAppDispatch, useAppSelector } from 'mastodon/store';\n\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport SettingToggle from '../notifications/components/setting_toggle';\nimport StatusListContainer from '../ui/containers/status_list_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.firehose', defaultMessage: 'Live feeds' },\n});\n\n// TODO: use a proper React context later on\nconst useIdentity = () => ({\n  signedIn: !!initialState.meta.me,\n  accountId: initialState.meta.me,\n  disabledAccountId: initialState.meta.disabled_account_id,\n  accessToken: initialState.meta.access_token,\n  permissions: initialState.role ? initialState.role.permissions : 0,\n});\n\nconst ColumnSettings = () => {\n  const dispatch = useAppDispatch();\n  const settings = useAppSelector((state) => state.getIn(['settings', 'firehose']));\n  const onChange = useCallback(\n    (key, checked) => dispatch(changeSetting(['firehose', ...key], checked)),\n    [dispatch],\n  );\n\n  return (\n    <div>\n      <div className='column-settings__row'>\n        <SettingToggle\n          settings={settings}\n          settingPath={['onlyMedia']}\n          onChange={onChange}\n          label={<FormattedMessage id='community.column_settings.media_only' defaultMessage='Media only' />}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst Firehose = ({ feedType, multiColumn }) => {\n  const dispatch = useAppDispatch();\n  const intl = useIntl();\n  const { signedIn } = useIdentity();\n  const columnRef = useRef(null);\n\n  const onlyMedia = useAppSelector((state) => state.getIn(['settings', 'firehose', 'onlyMedia'], false));\n  const hasUnread = useAppSelector((state) => state.getIn(['timelines', `${feedType}${onlyMedia ? ':media' : ''}`, 'unread'], 0) > 0);\n\n  const handlePin = useCallback(\n    () => {\n      switch(feedType) {\n      case 'community':\n        dispatch(addColumn('COMMUNITY', { other: { onlyMedia } }));\n        break;\n      case 'public':\n        dispatch(addColumn('PUBLIC', { other: { onlyMedia } }));\n        break;\n      case 'public:remote':\n        dispatch(addColumn('REMOTE', { other: { onlyMedia, onlyRemote: true } }));\n        break;\n      }\n    },\n    [dispatch, onlyMedia, feedType],\n  );\n\n  const handleLoadMore = useCallback(\n    (maxId) => {\n      switch(feedType) {\n      case 'community':\n        dispatch(expandCommunityTimeline({ maxId, onlyMedia }));\n        break;\n      case 'public':\n        dispatch(expandPublicTimeline({ maxId, onlyMedia }));\n        break;\n      case 'public:remote':\n        dispatch(expandPublicTimeline({ maxId, onlyMedia, onlyRemote: true }));\n        break;\n      }\n    },\n    [dispatch, onlyMedia, feedType],\n  );\n\n  const handleHeaderClick = useCallback(() => columnRef.current?.scrollTop(), []);\n\n  useEffect(() => {\n    let disconnect;\n\n    switch(feedType) {\n    case 'community':\n      dispatch(expandCommunityTimeline({ onlyMedia }));\n      if (signedIn) {\n        disconnect = dispatch(connectCommunityStream({ onlyMedia }));\n      }\n      break;\n    case 'public':\n      dispatch(expandPublicTimeline({ onlyMedia }));\n      if (signedIn) {\n        disconnect = dispatch(connectPublicStream({ onlyMedia }));\n      }\n      break;\n    case 'public:remote':\n      dispatch(expandPublicTimeline({ onlyMedia, onlyRemote: true }));\n      if (signedIn) {\n        disconnect = dispatch(connectPublicStream({ onlyMedia, onlyRemote: true }));\n      }\n      break;\n    }\n\n    return () => disconnect?.();\n  }, [dispatch, signedIn, feedType, onlyMedia]);\n\n  const prependBanner = feedType === 'community' ? (\n    <DismissableBanner id='community_timeline'>\n      <FormattedMessage\n        id='dismissable_banner.community_timeline'\n        defaultMessage='These are the most recent public posts from people whose accounts are hosted by {domain}.'\n        values={{ domain }}\n      />\n    </DismissableBanner>\n  ) : (\n    <DismissableBanner id='public_timeline'>\n      <FormattedMessage\n        id='dismissable_banner.public_timeline'\n        defaultMessage='These are the most recent public posts from people on the social web that people on {domain} follow.'\n        values={{ domain }}\n      />\n    </DismissableBanner>\n  );\n\n  const emptyMessage = feedType === 'community' ? (\n    <FormattedMessage\n      id='empty_column.community'\n      defaultMessage='The local timeline is empty. Write something publicly to get the ball rolling!'\n    />\n  ) : (\n    <FormattedMessage\n      id='empty_column.public'\n      defaultMessage='There is nothing here! Write something publicly, or manually follow users from other servers to fill it up'\n    />\n  );\n\n  return (\n    <Column bindToDocument={!multiColumn} ref={columnRef} label={intl.formatMessage(messages.title)}>\n      <ColumnHeader\n        icon='globe'\n        active={hasUnread}\n        title={intl.formatMessage(messages.title)}\n        onPin={handlePin}\n        onClick={handleHeaderClick}\n        multiColumn={multiColumn}\n      >\n        <ColumnSettings />\n      </ColumnHeader>\n\n      {/* <div className='account__section-headline'>\n        <NavLink exact to='/public/local'>\n          <FormattedMessage tagName='div' id='firehose.local' defaultMessage='This server' />\n        </NavLink>\n\n        <NavLink exact to='/public/remote'>\n          <FormattedMessage tagName='div' id='firehose.remote' defaultMessage='Other servers' />\n        </NavLink>\n\n        <NavLink exact to='/public'>\n          <FormattedMessage tagName='div' id='firehose.all' defaultMessage='All' />\n        </NavLink>\n      </div> */}\n\n      <StatusListContainer\n        timelineId={`${feedType}${onlyMedia ? ':media' : ''}`}\n        onLoadMore={handleLoadMore}\n        trackScroll\n        scrollKey='firehose'\n        emptyMessage={emptyMessage}\n        bindToDocument={!multiColumn}\n      />\n\n      <Helmet>\n        <title>{intl.formatMessage(messages.title)}</title>\n        <meta name='robots' content='noindex' />\n      </Helmet>\n    </Column>\n  );\n}\n\nFirehose.propTypes = {\n  multiColumn: PropTypes.bool,\n  feedType: PropTypes.string,\n};\n\nexport default Firehose;\n"],"sourceRoot":""}