{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/report/category.jsx","webpack:///./app/javascript/mastodon/features/report/comment.jsx","webpack:///./app/javascript/mastodon/features/report/rules.jsx","webpack:///./app/javascript/mastodon/features/report/components/status_check_box.jsx","webpack:///./app/javascript/mastodon/features/report/containers/status_check_box_container.js","webpack:///./app/javascript/mastodon/features/report/statuses.jsx","webpack:///./app/javascript/mastodon/features/report/thanks.jsx","webpack:///./app/javascript/mastodon/features/ui/components/report_modal.jsx"],"names":["messages","defineMessages","dislike","id","defaultMessage","dislike_description","spam","spam_description","legal","legal_description","violation","violation_description","other","other_description","status","account","Category","PureComponent","constructor","arguments","handleNextClick","onNextStep","category","this","props","handleCategoryToggle","value","checked","onChangeCategory","render","startedFrom","rules","intl","options","size","_jsxs","_Fragment","children","_jsx","className","FormattedMessage","values","type","formatMessage","map","item","Option","name","onToggle","label","description","Button","onClick","disabled","connect","state","getIn","ImmutableList","injectIntl","placeholder","selectRepliedToAccountIds","createSelector","get","_","statusIds","statusesMap","statusId","resultEqualityCheck","shallowEqual","Comment","_ref","comment","domain","isRemote","isSubmitting","selectedDomains","onSubmit","onChangeComment","onToggleDomain","useIntl","dispatch","useAppDispatch","loadedRef","useRef","handleClick","useCallback","handleChange","e","target","handleToggleDomain","handleKeyDown","keyCode","ctrlKey","metaKey","accountIds","useAppSelector","accountsMap","availableDomains","OrderedSet","union","accountId","split","filter","useEffect","current","forEach","has","fetchAccount","onChange","onKeyDown","Toggle","includes","Rules","handleRulesToggle","selectedRuleIds","multiple","public_short","unlisted_short","private_short","direct_short","StatusCheckBox","handleStatusesToggle","visibilityIcon","icon","text","labelComponent","Avatar","DisplayName","Icon","title","RelativeTimestamp","timestamp","StatusContent","MediaAttachments","makeMapStateToProps","getStatus","makeGetStatus","mapStateToProps","Statuses","availableStatusIds","selectedStatusIds","isLoading","LoadingIndicator","Thanks","handleCloseClick","onClose","handleUnfollowClick","unfollowAccount","handleMuteClick","muteAccount","handleBlockClick","blockAccount","submitted","secondary","close","ReportModal","ImmutablePureComponent","step","isSubmitted","handleSubmit","setState","submitReport","account_id","status_ids","toArray","forward_to_domains","forward","rule_ids","handleSuccess","handleFail","handleStatusToggle","add","remove","handleDomainToggle","handleRuleToggle","ruleId","handleChangeCategory","handleChangeComment","handleNextStep","componentDidMount","expandAccountTimeline","withReplies","fetchServer","stepComponent","IconButton","propTypes","PropTypes","string","isRequired","func","object","ImmutablePropTypes","getAccount","makeGetAccount"],"mappings":"+PAaA,MAAMA,EAAWC,YAAe,CAC9BC,QAAS,CAAEC,GAAG,yBAA2BC,eAAe,mBACxDC,oBAAqB,CAAEF,GAAG,qCAAuCC,eAAe,uCAChFE,KAAM,CAAEH,GAAG,sBAAwBC,eAAe,aAClDG,iBAAkB,CAAEJ,GAAG,kCAAoCC,eAAe,2DAC1EI,MAAO,CAAEL,GAAG,uBAAyBC,eAAe,gBACpDK,kBAAmB,CAAEN,GAAG,mCAAqCC,eAAe,mEAC5EM,UAAW,CAAEP,GAAG,2BAA6BC,eAAe,4BAC5DO,sBAAuB,CAAER,GAAG,uCAAyCC,eAAe,+CACpFQ,MAAO,CAAET,GAAG,uBAAyBC,eAAe,uBACpDS,kBAAmB,CAAEV,GAAG,mCAAqCC,eAAe,gDAC5EU,OAAQ,CAAEX,GAAG,+BAAiCC,eAAe,QAC7DW,QAAS,CAAEZ,GAAG,gCAAkCC,eAAe,aAOjE,MAAMY,UAAiBC,gBAAcC,cAAA,SAAAC,WAAA,KAWnCC,gBAAkB,KAChB,MAAM,WAAEC,EAAU,SAAEC,GAAaC,KAAKC,MAEtC,OAAOF,GACP,IAAK,UACHD,EAAW,UACX,MACF,IAAK,YACHA,EAAW,SACX,MACF,QACEA,EAAW,YAEb,EACA,KAEFI,qBAAuB,CAACC,EAAOC,KAC7B,MAAM,iBAAEC,GAAqBL,KAAKC,MAE9BG,GACFC,EAAiBF,EACnB,CACA,CAEFG,SACE,MAAM,SAAEP,EAAQ,YAAEQ,EAAW,MAAEC,EAAK,KAAEC,GAAST,KAAKC,MAE9CS,EAAUF,EAAMG,KAAO,EAAI,CAC/B,UACA,OACA,QACA,YACA,SACE,CACF,UACA,OACA,QACA,SAGF,OACEC,eAAAC,WAAA,CAAAC,SAAA,CACEC,YAAA,MAAIC,UAAU,mCAA4B,EAACD,YAACE,IAAgB,CAACrC,GAAE,wBAAyBC,eAAe,2CAA2CqC,OAAQ,CAAEC,KAAMV,EAAKW,cAAc3C,EAAS8B,QAC9LQ,YAAA,KAAGC,UAAU,kCAA2B,EAACD,YAACE,IAAgB,CAACrC,GAAE,2BAA4BC,eAAe,2BAExGkC,YAAA,gBACGL,EAAQW,KAAIC,GACXP,YAACQ,IAAM,CAELC,KAAK,WACLrB,MAAOmB,EACPlB,QAASL,IAAauB,EACtBG,SAAUzB,KAAKE,qBACfwB,MAAOjB,EAAKW,cAAc3C,EAAS6C,IACnCK,YAAalB,EAAKW,cAAc3C,EAAU,GAAE6C,mBANvCA,MAWXP,YAAA,OAAKC,UAAU,gBAEfD,YAAA,OAAKC,UAAU,qCAA8B,EAC3CD,YAACa,IAAM,CAACC,QAAS7B,KAAKH,gBAAiBiC,SAAuB,OAAb/B,QAAkB,EAACgB,YAACE,IAAgB,CAACrC,GAAE,cAAeC,eAAe,aAI9H,EAIakD,yBArFSC,IAAK,CAC3BxB,MAAOwB,EAAMC,MAAM,CAAC,SAAU,SAAU,SAAUC,qBAoFrCH,CAAyBI,YAAW1C,I,kDCjGnD,MAAMhB,EAAWC,YAAe,CAC9B0D,YAAa,CAAExD,GAAG,qBAAuBC,eAAe,uCAGpDwD,EAA4BC,YAChC,CACGN,GAAUA,EAAMO,IAAI,YACrB,CAACC,EAAGC,IAAcA,IAEpB,CAACC,EAAaD,IAAcA,EAAUpB,KAAKsB,GAAaD,EAAYT,MAAM,CAACU,EAAU,8BACrF,CACEC,oBAAqBC,iBA6FVC,MAzFCC,IAAyH,IAAxH,QAAEC,EAAO,OAAEC,EAAM,UAAER,EAAS,SAAES,EAAQ,aAAEC,EAAY,gBAAEC,EAAe,SAAEC,EAAQ,gBAAEC,EAAe,eAAEC,GAAgBR,EACjI,MAAMtC,EAAO+C,cAEPC,EAAWC,cACXC,EAAYC,kBAAO,GAEnBC,EAAcC,uBAAY,IAAMT,KAAY,CAACA,IAC7CU,EAAeD,uBAAaE,GAAMV,EAAgBU,EAAEC,OAAO9D,QAAQ,CAACmD,IACpEY,EAAqBJ,uBAAYE,GAAKT,EAAeS,EAAEC,OAAO9D,MAAO6D,EAAEC,OAAO7D,UAAU,CAACmD,IAEzFY,EAAgBL,uBAAaE,IACf,KAAdA,EAAEI,UAAmBJ,EAAEK,SAAWL,EAAEM,UACtCT,GACF,GACC,CAACA,IAGEU,EAAaC,aAAgBxC,GAAUiB,EAASZ,EAA0BL,EAAOS,GAAaP,mBAG9FuC,EAAcD,aAAgBxC,GAAUA,EAAMO,IAAI,cAClDmC,EAAmBzB,EAAS0B,qBAAW,CAAC1B,IAAS2B,MAAML,EAAWlD,KAAKwD,GAAcJ,EAAYxC,MAAM,CAAC4C,EAAW,QAAS,IAAIC,MAAM,KAAK,KAAIC,QAAO9B,KAAYA,KAAW0B,uBAqBnL,OAnBAK,qBAAU,KACR,GAAIrB,EAAUsB,QACZ,OAGFtB,EAAUsB,SAAU,EAGpBP,EAAiBQ,SAASjC,IACxBM,EAAeN,GAAQ,EAAK,IAIN0B,qBAAWJ,EAAWQ,QAAOF,GAAaA,IAAcJ,EAAYU,IAAIN,MAChFK,SAASL,IACvBpB,EAAS2B,YAAaP,GAAW,GACjC,IAIFjE,eAAAC,WAAA,CAAAC,SAAA,CACEC,YAAA,MAAIC,UAAU,mCAA4B,EAACD,YAACE,IAAgB,CAACrC,GAAE,uBAAwBC,eAAe,sDAEtGkC,YAAA,YACEC,UAAU,gCACVoB,YAAa3B,EAAKW,cAAc3C,EAAS2D,aACzCjC,MAAO6C,EACPqC,SAAUtB,EACVuB,UAAWnB,EACXrC,SAAUqB,IAGXD,GACCtC,eAAAC,WAAA,CAAAC,SAAA,CACEC,YAAA,KAAGC,UAAU,kCAA2B,EAACD,YAACE,IAAgB,CAACrC,GAAE,sBAAuBC,eAAe,8FAEjG6F,EAAiBrD,KAAK4B,GACtBlC,YAAA,SAAOC,UAAU,+BAAoC,UAASiC,IAC5DlC,YAACwE,IAAM,CAACnF,QAASgD,EAAgBoC,SAASvC,GAASnB,SAAUqB,EAAckC,SAAUnB,EAAoB/D,MAAO8C,IAChHlC,YAACE,IAAgB,CAACrC,GAAE,iBAAkBC,eAAe,sBAAsBqC,OAAQ,CAAE+C,OAAQhB,WAMrGlC,YAAA,OAAKC,UAAU,gBAEfD,YAAA,OAAKC,UAAU,qCAA8B,EAC3CD,YAACa,IAAM,CAACC,QAASgC,EAAa/B,SAAUqB,QAAa,EAACpC,YAACE,IAAgB,CAACrC,GAAE,gBAAiBC,eAAe,sBAE3G,ECxFP,MAAM4G,UAAc/F,gBAAcC,cAAA,SAAAC,WAAA,KAShCC,gBAAkB,KAChB,MAAM,WAAEC,GAAeE,KAAKC,MAC5BH,EAAW,WAAW,EACtB,KAEF4F,kBAAoB,CAACvF,EAAOC,KAC1B,MAAM,SAAEqB,GAAazB,KAAKC,MAC1BwB,EAAStB,EAAOC,EAAQ,CACxB,CAEFE,SACE,MAAM,MAAEE,EAAK,gBAAEmF,GAAoB3F,KAAKC,MAExC,OACEW,eAAAC,WAAA,CAAAC,SAAA,CACEC,YAAA,MAAIC,UAAU,mCAA4B,EAACD,YAACE,IAAgB,CAACrC,GAAE,qBAAsBC,eAAe,qCACpGkC,YAAA,KAAGC,UAAU,kCAA2B,EAACD,YAACE,IAAgB,CAACrC,GAAE,wBAAyBC,eAAe,2BAErGkC,YAAA,gBACGP,EAAMa,KAAIC,GACTP,YAACQ,IAAM,CAELC,KAAK,WACLrB,MAAOmB,EAAKiB,IAAI,MAChBnC,QAASuF,EAAgBH,SAASlE,EAAKiB,IAAI,OAC3Cd,SAAUzB,KAAK0F,kBACfhE,MAAOJ,EAAKiB,IAAI,QAChBqD,UAAQ,GANHtE,EAAKiB,IAAI,UAWpBxB,YAAA,OAAKC,UAAU,gBAEfD,YAAA,OAAKC,UAAU,qCAA8B,EAC3CD,YAACa,IAAM,CAACC,QAAS7B,KAAKH,gBAAiBiC,SAAU6D,EAAgBhF,KAAO,QAAE,EAACI,YAACE,IAAgB,CAACrC,GAAE,cAAeC,eAAe,aAIrI,EAIakD,yBAxDSC,IAAK,CAC3BxB,MAAOwB,EAAMC,MAAM,CAAC,SAAU,SAAU,aAuD3BF,CAAyB0D,G,oECpDxC,MAAMhH,EAAWC,YAAe,CAC9BmH,aAAc,CAAEjH,GAAG,uBAAyBC,eAAe,UAC3DiH,eAAgB,CAAElH,GAAG,yBAA2BC,eAAe,YAC/DkH,cAAe,CAAEnH,GAAG,wBAA0BC,eAAe,kBAC7DmH,aAAc,CAAEpH,GAAG,uBAAyBC,eAAe,2BAG7D,MAAMoH,UAAuBvG,gBAAcC,cAAA,SAAAC,WAAA,KAUzCsG,qBAAuB,CAAC/F,EAAOC,KAC7B,MAAM,SAAEqB,GAAazB,KAAKC,MAC1BwB,EAAStB,EAAOC,EAAQ,CACxB,CAEFE,SACE,MAAM,OAAEf,EAAM,QAAEa,EAAO,KAAEK,GAAST,KAAKC,MAEvC,GAAIV,EAAOgD,IAAI,UACb,OAAO,KAGT,MAOM4D,EAPqB,CACzB,OAAU,CAAEC,KAAM,QAASC,KAAM5F,EAAKW,cAAc3C,EAASoH,eAC7D,SAAY,CAAEO,KAAM,SAAUC,KAAM5F,EAAKW,cAAc3C,EAASqH,iBAChE,QAAW,CAAEM,KAAM,OAAQC,KAAM5F,EAAKW,cAAc3C,EAASsH,gBAC7D,OAAU,CAAEK,KAAM,KAAMC,KAAM5F,EAAKW,cAAc3C,EAASuH,gBAGlBzG,EAAOgD,IAAI,eAE/C+D,EACJvF,YAAA,OAAKC,UAAU,oDAA6C,EAC1DD,YAAA,OAAKC,UAAU,sCAA+B,EAC5CD,YAAA,OAAKC,UAAU,wCAAiC,EAC9CD,YAACwF,IAAM,CAAC/G,QAASD,EAAOgD,IAAI,WAAY5B,KAAM,MAGhDI,YAAA,gBACEA,YAACyF,IAAW,CAAChH,QAASD,EAAOgD,IAAI,aAAc,MAAGxB,YAAA,QAAMC,UAAU,gCAAyB,EAACD,YAAC0F,IAAI,CAAC7H,GAAIuH,EAAeC,KAAMM,MAAOP,EAAeE,QAAe,IAACtF,YAAC4F,IAAiB,CAACC,UAAWrH,EAAOgD,IAAI,kBAI9MxB,YAAC8F,IAAa,CAACtH,OAAQA,IACvBwB,YAAC+F,IAAgB,CAACvH,OAAQA,KAI9B,OACEwB,YAACQ,IAAM,CACLC,KAAK,aACLrB,MAAOZ,EAAOgD,IAAI,MAClBnC,QAASA,EACTqB,SAAUzB,KAAKkG,qBACfxE,MAAOnC,EAAOgD,IAAI,gBAClB+D,eAAgBA,EAChBV,UAAQ,GAGd,EAIazD,kBAAW8D,GCtEXlE,yBAVagF,KAC1B,MAAMC,EAAYC,cAMlB,MAJwBC,CAAClF,EAAKe,KAAA,IAAE,GAAEnE,GAAImE,EAAA,MAAM,CAC1CxD,OAAQyH,EAAUhF,EAAO,CAAEpD,OAC5B,CAEqB,GAGTmD,CAA6BkE,GCE5C,MAAMkB,UAAiBzH,gBAAcC,cAAA,SAAAC,WAAA,KAWnCC,gBAAkB,KAChB,MAAM,WAAEC,GAAeE,KAAKC,MAC5BH,EAAW,UAAU,CACrB,CAEFQ,SACE,MAAM,mBAAE8G,EAAkB,kBAAEC,EAAiB,SAAE5F,EAAQ,UAAE6F,GAActH,KAAKC,MAE5E,OACEW,eAAAC,WAAA,CAAAC,SAAA,CACEC,YAAA,MAAIC,UAAU,mCAA4B,EAACD,YAACE,IAAgB,CAACrC,GAAE,wBAAyBC,eAAe,mDACvGkC,YAAA,KAAGC,UAAU,kCAA2B,EAACD,YAACE,IAAgB,CAACrC,GAAE,2BAA4BC,eAAe,2BAExGkC,YAAA,OAAKC,UAAU,sCAA+B,EAC3CsG,EAAYvG,YAACwG,IAAgB,IAAMH,EAAmBxC,MAAMyC,GAAmBhG,KAAIsB,GAClF5B,YAACkF,EAAc,CACbrH,GAAI+D,EAEJvC,QAASiH,EAAkB7B,SAAS7C,GACpClB,SAAUA,GAFLkB,MAOX5B,YAAA,OAAKC,UAAU,gBAEfD,YAAA,OAAKC,UAAU,qCAA8B,EAC3CD,YAACa,IAAM,CAACC,QAAS7B,KAAKH,sBAAgB,EAACkB,YAACE,IAAgB,CAACrC,GAAE,cAAeC,eAAe,aAIjG,EAIakD,yBAnDSmF,CAAClF,EAAKe,KAAA,IAAE,UAAE8B,GAAW9B,EAAA,MAAM,CACjDqE,mBAAoBzC,qBAAW3C,EAAMC,MAAM,CAAC,YAAc,WAAU4C,iBAA0B,WAC9FyC,UAAWtF,EAAMC,MAAM,CAAC,YAAc,WAAU4C,iBAA0B,cAC3E,GAgDc9C,CAAyBoF,GC/CxC,MAAMK,UAAe9H,gBAAcC,cAAA,SAAAC,WAAA,KASjC6H,iBAAmB,KACjB,MAAM,QAAEC,GAAY1H,KAAKC,MACzByH,GAAS,EACT,KAEFC,oBAAsB,KACpB,MAAM,SAAElE,EAAQ,QAAEjE,EAAO,QAAEkI,GAAY1H,KAAKC,MAC5CwD,EAASmE,aAAgBpI,EAAQ+C,IAAI,QACrCmF,GAAS,EACT,KAEFG,gBAAkB,KAChB,MAAM,SAAEpE,EAAQ,QAAEjE,EAAO,QAAEkI,GAAY1H,KAAKC,MAC5CwD,EAASqE,YAAYtI,EAAQ+C,IAAI,QACjCmF,GAAS,EACT,KAEFK,iBAAmB,KACjB,MAAM,SAAEtE,EAAQ,QAAEjE,EAAO,QAAEkI,GAAY1H,KAAKC,MAC5CwD,EAASuE,YAAaxI,EAAQ+C,IAAI,QAClCmF,GAAS,CACT,CAEFpH,SACE,MAAM,QAAEd,EAAO,UAAEyI,GAAcjI,KAAKC,MAEpC,OACEW,eAAAC,WAAA,CAAAC,SAAA,CACEC,YAAA,MAAIC,UAAU,mCAA4B,EAAEiH,EAAYlH,YAACE,IAAgB,CAACrC,GAAE,iCAAkCC,eAAe,gDAAmDkC,YAACE,IAAgB,CAACrC,GAAE,sBAAuBC,eAAe,6BAC1OkC,YAAA,KAAGC,UAAU,kCAA2B,EAAEiH,EAAYlH,YAACE,IAAgB,CAACrC,GAAE,uCAAwCC,eAAe,6DAA6DqC,OAAQ,CAAEM,KAAMhC,EAAQ+C,IAAI,eAAoBxB,YAACE,IAAgB,CAACrC,GAAE,4BAA6BC,eAAe,qEAE7SW,EAAQyC,MAAM,CAAC,eAAgB,eAC9BrB,eAAAC,WAAA,CAAAC,SAAA,CACEC,YAAA,MAAIC,UAAU,sCAA+B,EAACD,YAACE,IAAgB,CAACrC,GAAE,kBAAmBC,eAAe,mBAAmBqC,OAAQ,CAAEM,KAAMhC,EAAQ+C,IAAI,gBACnJxB,YAAA,KAAGC,UAAU,kCAA2B,EAACD,YAACE,IAAgB,CAACrC,GAAE,8BAA+BC,eAAe,sGAC3GkC,YAACa,IAAM,CAACsG,WAAS,EAACrG,QAAS7B,KAAK2H,0BAAoB,EAAC5G,YAACE,IAAgB,CAACrC,GAAE,mBAAoBC,eAAe,cAC5GkC,YAAA,YAIJA,YAAA,MAAIC,UAAU,sCAA+B,EAACD,YAACE,IAAgB,CAACrC,GAAE,eAAgBC,eAAe,eAAeqC,OAAQ,CAAEM,KAAMhC,EAAQ+C,IAAI,gBAC5IxB,YAAA,KAAGC,UAAU,kCAA2B,EAACD,YAACE,IAAgB,CAACrC,GAAE,0BAA2BC,eAAe,uHACvGkC,YAACa,IAAM,CAACsG,WAAS,EAACrG,QAAS7B,KAAK6H,sBAAgB,EAAGrI,EAAQyC,MAAM,CAAC,eAAgB,WAA2ElB,YAACE,IAAgB,CAACrC,GAAE,gBAAiBC,eAAe,UAAlHkC,YAACE,IAAgB,CAACrC,GAAE,cAAeC,eAAe,UAEjJkC,YAAA,SAEAA,YAAA,MAAIC,UAAU,sCAA+B,EAACD,YAACE,IAAgB,CAACrC,GAAE,gBAAiBC,eAAe,gBAAgBqC,OAAQ,CAAEM,KAAMhC,EAAQ+C,IAAI,gBAC9IxB,YAAA,KAAGC,UAAU,kCAA2B,EAACD,YAACE,IAAgB,CAACrC,GAAE,2BAA4BC,eAAe,2IACxGkC,YAACa,IAAM,CAACsG,WAAS,EAACrG,QAAS7B,KAAK+H,uBAAiB,EAAGvI,EAAQyC,MAAM,CAAC,eAAgB,aAA+ElB,YAACE,IAAgB,CAACrC,GAAE,kBAAmBC,eAAe,YAAtHkC,YAACE,IAAgB,CAACrC,GAAE,eAAgBC,eAAe,WAErJkC,YAAA,OAAKC,UAAU,gBAEfD,YAAA,OAAKC,UAAU,qCAA8B,EAC3CD,YAACa,IAAM,CAACC,QAAS7B,KAAKyH,uBAAiB,EAAC1G,YAACE,IAAgB,CAACrC,GAAE,eAAgBC,eAAe,aAInG,EAIakD,yBAxESmF,KAAA,CAAS,IAwElBnF,CAAyByF,GCnExC,MAAM/I,EAAWC,YAAe,CAC9ByJ,MAAO,CAAEvJ,GAAG,iBAAmBC,eAAe,WAahD,MAAMuJ,UAAoBC,IAAuB1I,cAAA,SAAAC,WAAA,KAU/CoC,MAAQ,CACNsG,KAAM,WACNjB,kBAAmB1C,qBAAW3E,KAAKC,MAAM0C,SAAW,CAAC3C,KAAKC,MAAM0C,UAAY,IAC5ES,gBAAiBuB,uBACjB3B,QAAS,GACTjD,SAAU,KACV4F,gBAAiBhB,uBACjBxB,cAAc,EACdoF,aAAa,GACb,KAEFC,aAAe,KACb,MAAM,SAAE/E,EAAQ,UAAEoB,GAAc7E,KAAKC,OAC/B,kBAAEoH,EAAiB,gBAAEjE,EAAe,QAAEJ,EAAO,SAAEjD,EAAQ,gBAAE4F,GAAoB3F,KAAKgC,MAExFhC,KAAKyI,SAAS,CAAEtF,cAAc,IAE9BM,EAASiF,YAAa,CACpBC,WAAY9D,EACZ+D,WAAYvB,EAAkBwB,UAC9BC,mBAAoB1F,EAAgByF,UACpC7F,UACA+F,QAAS3F,EAAgBzC,KAAO,EAChCZ,WACAiJ,SAAUrD,EAAgBkD,WACzB7I,KAAKiJ,cAAejJ,KAAKkJ,YAAY,EACxC,KAEFD,cAAgB,KACdjJ,KAAKyI,SAAS,CAAEtF,cAAc,EAAOoF,aAAa,EAAMD,KAAM,UAAW,EACzE,KAEFY,WAAa,KACXlJ,KAAKyI,SAAS,CAAEtF,cAAc,GAAQ,EACtC,KAEFgG,mBAAqB,CAACxG,EAAUvC,KAC9B,MAAM,kBAAEiH,GAAsBrH,KAAKgC,MAE/B5B,EACFJ,KAAKyI,SAAS,CAAEpB,kBAAmBA,EAAkB+B,IAAIzG,KAEzD3C,KAAKyI,SAAS,CAAEpB,kBAAmBA,EAAkBgC,OAAO1G,IAC9D,EACA,KAEF2G,mBAAqB,CAACrG,EAAQ7C,KACxBA,EACFJ,KAAKyI,UAAUzG,IAAK,CAAQoB,gBAAiBpB,EAAMoB,gBAAgBgG,IAAInG,OAEvEjD,KAAKyI,UAAUzG,IAAK,CAAQoB,gBAAiBpB,EAAMoB,gBAAgBiG,OAAOpG,MAC5E,EACA,KAEFsG,iBAAmB,CAACC,EAAQpJ,KACtBA,EACFJ,KAAKyI,UAAUzG,IAAK,CAAQ2D,gBAAiB3D,EAAM2D,gBAAgByD,IAAII,OAEvExJ,KAAKyI,UAAUzG,IAAK,CAAQ2D,gBAAiB3D,EAAM2D,gBAAgB0D,OAAOG,MAC5E,EACA,KAEFC,qBAAuB1J,IACrBC,KAAKyI,SAAS,CAAE1I,YAAW,EAC3B,KAEF2J,oBAAsB1G,IACpBhD,KAAKyI,SAAS,CAAEzF,WAAU,EAC1B,KAEF2G,eAAiBrB,IACftI,KAAKyI,SAAS,CAAEH,QAAO,CACvB,CAEFsB,oBACE,MAAM,SAAEnG,EAAQ,UAAEoB,GAAc7E,KAAKC,MAErCwD,EAASoG,YAAsBhF,EAAW,CAAEiF,aAAa,KACzDrG,EAASsG,cACX,CAEAzJ,SACE,MAAM,UACJuE,EAAS,QACTrF,EAAO,KACPiB,EAAI,QACJiH,GACE1H,KAAKC,MAET,IAAKT,EACH,OAAO,KAGT,MAAM,KACJ8I,EAAI,kBACJjB,EAAiB,gBACjB1B,EAAe,gBACfvC,EAAe,QACfJ,EAAO,SACPjD,EAAQ,aACRoD,EAAY,YACZoF,GACEvI,KAAKgC,MAEHiB,EAAWzD,EAAQ+C,IAAI,QAAQuC,MAAM,KAAK,GAC1C5B,IAAaD,EAEnB,IAAI+G,EAEJ,OAAO1B,GACP,IAAK,WACH0B,EACEjJ,YAACtB,EAAQ,CACPK,WAAYE,KAAK2J,eACjBpJ,YAAaP,KAAKC,MAAM0C,SAAW,SAAW,UAC9C5C,SAAUA,EACVM,iBAAkBL,KAAKyJ,uBAG3B,MACF,IAAK,QACHO,EACEjJ,YAAC0E,EAAK,CACJ3F,WAAYE,KAAK2J,eACjBhE,gBAAiBA,EACjBlE,SAAUzB,KAAKuJ,mBAGnB,MACF,IAAK,WACHS,EACEjJ,YAACoG,EAAQ,CACPrH,WAAYE,KAAK2J,eACjB9E,UAAWA,EACXwC,kBAAmBA,EACnB5F,SAAUzB,KAAKmJ,qBAGnB,MACF,IAAK,UACHa,EACEjJ,YAAC+B,EAAO,CACNO,SAAUrD,KAAKwI,aACfrF,aAAcA,EACdD,SAAUA,EACVF,QAASA,EACTC,OAAQA,EACRK,gBAAiBtD,KAAK0J,oBACtBjH,UAAW4E,EACXjE,gBAAiBA,EACjBG,eAAgBvD,KAAKsJ,qBAGzB,MACF,IAAK,SACHU,EACEjJ,YAACyG,EAAM,CACLS,UAAWM,EACX/I,QAASA,EACTkI,QAASA,IAKf,OACE3G,YAAA,OAAKC,UAAU,8CAAuC,EACpDD,YAAA,OAAKC,UAAU,6BAAsB,EACnCD,YAACkJ,IAAU,CAACjJ,UAAU,sBAAsB0F,MAAOjG,EAAKW,cAAc3C,EAAS0J,OAAQ/B,KAAK,QAAQvE,QAAS6F,EAAS/G,KAAM,KAC5HI,YAACE,IAAgB,CAACrC,GAAE,gBAAiBC,eAAe,kBAAkBqC,OAAQ,CAAE+C,OAAQlD,YAAA,mBAASvB,EAAQ+C,IAAI,aAG/GxB,YAAA,OAAKC,UAAU,uCAAgC,EAC5CgJ,GAIT,EA1LI5B,EAEG8B,UAAY,CACjBrF,UAAWsF,IAAUC,OAAOC,WAC5B1H,SAAUwH,IAAUC,OACpB3G,SAAU0G,IAAUG,KAAKD,WACzB5J,KAAM0J,IAAUI,OAAOF,WACvB7K,QAASgL,IAAmBnJ,IAAIgJ,YAuLrBtI,6BAxMagF,KAC1B,MAAM0D,EAAaC,cAMnB,MAJwBxD,CAAClF,EAAKe,KAAA,IAAE,UAAE8B,GAAW9B,EAAA,MAAM,CACjDvD,QAASiL,EAAWzI,EAAO6C,GAC5B,CAEqB,GAiMT9C,CAA6BI,YAAWiG,G","file":"js/modals/report_modal-39b8a138f87360b95036.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport Button from 'mastodon/components/button';\n\nimport Option from './components/option';\n\nconst messages = defineMessages({\n  dislike: { id: 'report.reasons.dislike', defaultMessage: 'I don\\'t like it' },\n  dislike_description: { id: 'report.reasons.dislike_description', defaultMessage: 'It is not something you want to see' },\n  spam: { id: 'report.reasons.spam', defaultMessage: 'It\\'s spam' },\n  spam_description: { id: 'report.reasons.spam_description', defaultMessage: 'Malicious links, fake engagement, or repetitive replies' },\n  legal: { id: 'report.reasons.legal', defaultMessage: 'It\\'s illegal' },\n  legal_description: { id: 'report.reasons.legal_description', defaultMessage: 'You believe it violates the law of your or the server\\'s country' },\n  violation: { id: 'report.reasons.violation', defaultMessage: 'It violates server rules' },\n  violation_description: { id: 'report.reasons.violation_description', defaultMessage: 'You are aware that it breaks specific rules' },\n  other: { id: 'report.reasons.other', defaultMessage: 'It\\'s something else' },\n  other_description: { id: 'report.reasons.other_description', defaultMessage: 'The issue does not fit into other categories' },\n  status: { id: 'report.category.title_status', defaultMessage: 'post' },\n  account: { id: 'report.category.title_account', defaultMessage: 'profile' },\n});\n\nconst mapStateToProps = state => ({\n  rules: state.getIn(['server', 'server', 'rules'], ImmutableList()),\n});\n\nclass Category extends PureComponent {\n\n  static propTypes = {\n    onNextStep: PropTypes.func.isRequired,\n    rules: ImmutablePropTypes.list,\n    category: PropTypes.string,\n    onChangeCategory: PropTypes.func.isRequired,\n    startedFrom: PropTypes.oneOf(['status', 'account']),\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleNextClick = () => {\n    const { onNextStep, category } = this.props;\n\n    switch(category) {\n    case 'dislike':\n      onNextStep('thanks');\n      break;\n    case 'violation':\n      onNextStep('rules');\n      break;\n    default:\n      onNextStep('statuses');\n      break;\n    }\n  };\n\n  handleCategoryToggle = (value, checked) => {\n    const { onChangeCategory } = this.props;\n\n    if (checked) {\n      onChangeCategory(value);\n    }\n  };\n\n  render () {\n    const { category, startedFrom, rules, intl } = this.props;\n\n    const options = rules.size > 0 ? [\n      'dislike',\n      'spam',\n      'legal',\n      'violation',\n      'other',\n    ] : [\n      'dislike',\n      'spam',\n      'legal',\n      'other',\n    ];\n\n    return (\n      <>\n        <h3 className='report-dialog-modal__title'><FormattedMessage id='report.category.title' defaultMessage=\"Tell us what's going on with this {type}\" values={{ type: intl.formatMessage(messages[startedFrom]) }} /></h3>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.category.subtitle' defaultMessage='Choose the best match' /></p>\n\n        <div>\n          {options.map(item => (\n            <Option\n              key={item}\n              name='category'\n              value={item}\n              checked={category === item}\n              onToggle={this.handleCategoryToggle}\n              label={intl.formatMessage(messages[item])}\n              description={intl.formatMessage(messages[`${item}_description`])}\n            />\n          ))}\n        </div>\n\n        <div className='flex-spacer' />\n\n        <div className='report-dialog-modal__actions'>\n          <Button onClick={this.handleNextClick} disabled={category === null}><FormattedMessage id='report.next' defaultMessage='Next' /></Button>\n        </div>\n      </>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(Category));\n","import PropTypes from 'prop-types';\nimport { useCallback, useEffect, useRef } from 'react';\n\nimport { useIntl, defineMessages, FormattedMessage } from 'react-intl';\n\nimport { OrderedSet, List as ImmutableList } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { shallowEqual } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport Toggle from 'react-toggle';\n\nimport { fetchAccount } from 'mastodon/actions/accounts';\nimport Button from 'mastodon/components/button';\nimport { useAppDispatch, useAppSelector } from 'mastodon/store';\n\nconst messages = defineMessages({\n  placeholder: { id: 'report.placeholder', defaultMessage: 'Type or paste additional comments' },\n});\n\nconst selectRepliedToAccountIds = createSelector(\n  [\n    (state) => state.get('statuses'),\n    (_, statusIds) => statusIds,\n  ],\n  (statusesMap, statusIds) => statusIds.map((statusId) => statusesMap.getIn([statusId, 'in_reply_to_account_id'])),\n  {\n    resultEqualityCheck: shallowEqual,\n  }\n);\n\nconst Comment = ({ comment, domain, statusIds, isRemote, isSubmitting, selectedDomains, onSubmit, onChangeComment, onToggleDomain }) => {\n  const intl = useIntl();\n\n  const dispatch = useAppDispatch();\n  const loadedRef = useRef(false);\n\n  const handleClick = useCallback(() => onSubmit(), [onSubmit]);\n  const handleChange = useCallback((e) => onChangeComment(e.target.value), [onChangeComment]);\n  const handleToggleDomain = useCallback(e => onToggleDomain(e.target.value, e.target.checked), [onToggleDomain]);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.keyCode === 13 && (e.ctrlKey || e.metaKey)) {\n      handleClick();\n    }\n  }, [handleClick]);\n\n  // Memoize accountIds since we don't want it to trigger `useEffect` on each render\n  const accountIds = useAppSelector((state) => domain ? selectRepliedToAccountIds(state, statusIds) : ImmutableList());\n\n  // While we could memoize `availableDomains`, it is pretty inexpensive to recompute\n  const accountsMap = useAppSelector((state) => state.get('accounts'));\n  const availableDomains = domain ? OrderedSet([domain]).union(accountIds.map((accountId) => accountsMap.getIn([accountId, 'acct'], '').split('@')[1]).filter(domain => !!domain)) : OrderedSet();\n\n  useEffect(() => {\n    if (loadedRef.current) {\n      return;\n    }\n\n    loadedRef.current = true;\n\n    // First, pre-select known domains\n    availableDomains.forEach((domain) => {\n      onToggleDomain(domain, true);\n    });\n\n    // Then, fetch missing replied-to accounts\n    const unknownAccounts = OrderedSet(accountIds.filter(accountId => accountId && !accountsMap.has(accountId)));\n    unknownAccounts.forEach((accountId) => {\n      dispatch(fetchAccount(accountId));\n    });\n  });\n\n  return (\n    <>\n      <h3 className='report-dialog-modal__title'><FormattedMessage id='report.comment.title' defaultMessage='Is there anything else you think we should know?' /></h3>\n\n      <textarea\n        className='report-dialog-modal__textarea'\n        placeholder={intl.formatMessage(messages.placeholder)}\n        value={comment}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n        disabled={isSubmitting}\n      />\n\n      {isRemote && (\n        <>\n          <p className='report-dialog-modal__lead'><FormattedMessage id='report.forward_hint' defaultMessage='The account is from another server. Send an anonymized copy of the report there as well?' /></p>\n\n          { availableDomains.map((domain) => (\n            <label className='report-dialog-modal__toggle' key={`toggle-${domain}`}>\n              <Toggle checked={selectedDomains.includes(domain)} disabled={isSubmitting} onChange={handleToggleDomain} value={domain} />\n              <FormattedMessage id='report.forward' defaultMessage='Forward to {target}' values={{ target: domain }} />\n            </label>\n          ))}\n        </>\n      )}\n\n      <div className='flex-spacer' />\n\n      <div className='report-dialog-modal__actions'>\n        <Button onClick={handleClick} disabled={isSubmitting}><FormattedMessage id='report.submit' defaultMessage='Submit report' /></Button>\n      </div>\n    </>\n  );\n}\n\nComment.propTypes = {\n  comment: PropTypes.string.isRequired,\n  domain: PropTypes.string,\n  statusIds: ImmutablePropTypes.list.isRequired,\n  isRemote: PropTypes.bool,\n  isSubmitting: PropTypes.bool,\n  selectedDomains: ImmutablePropTypes.set.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onChangeComment: PropTypes.func.isRequired,\n  onToggleDomain: PropTypes.func.isRequired,\n};\n\nexport default Comment;\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport Button from 'mastodon/components/button';\n\nimport Option from './components/option';\n\nconst mapStateToProps = state => ({\n  rules: state.getIn(['server', 'server', 'rules']),\n});\n\nclass Rules extends PureComponent {\n\n  static propTypes = {\n    onNextStep: PropTypes.func.isRequired,\n    rules: ImmutablePropTypes.list,\n    selectedRuleIds: ImmutablePropTypes.set.isRequired,\n    onToggle: PropTypes.func.isRequired,\n  };\n\n  handleNextClick = () => {\n    const { onNextStep } = this.props;\n    onNextStep('statuses');\n  };\n\n  handleRulesToggle = (value, checked) => {\n    const { onToggle } = this.props;\n    onToggle(value, checked);\n  };\n\n  render () {\n    const { rules, selectedRuleIds } = this.props;\n\n    return (\n      <>\n        <h3 className='report-dialog-modal__title'><FormattedMessage id='report.rules.title' defaultMessage='Which rules are being violated?' /></h3>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.rules.subtitle' defaultMessage='Select all that apply' /></p>\n\n        <div>\n          {rules.map(item => (\n            <Option\n              key={item.get('id')}\n              name='rule_ids'\n              value={item.get('id')}\n              checked={selectedRuleIds.includes(item.get('id'))}\n              onToggle={this.handleRulesToggle}\n              label={item.get('text')}\n              multiple\n            />\n          ))}\n        </div>\n\n        <div className='flex-spacer' />\n\n        <div className='report-dialog-modal__actions'>\n          <Button onClick={this.handleNextClick} disabled={selectedRuleIds.size < 1}><FormattedMessage id='report.next' defaultMessage='Next' /></Button>\n        </div>\n      </>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(Rules);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { injectIntl, defineMessages } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport { Avatar } from 'mastodon/components/avatar';\nimport { DisplayName } from 'mastodon/components/display_name';\nimport { Icon }  from 'mastodon/components/icon';\nimport MediaAttachments from 'mastodon/components/media_attachments';\nimport { RelativeTimestamp } from 'mastodon/components/relative_timestamp';\nimport StatusContent from 'mastodon/components/status_content';\n\nimport Option from './option';\n\nconst messages = defineMessages({\n  public_short: { id: 'privacy.public.short', defaultMessage: 'Public' },\n  unlisted_short: { id: 'privacy.unlisted.short', defaultMessage: 'Unlisted' },\n  private_short: { id: 'privacy.private.short', defaultMessage: 'Followers only' },\n  direct_short: { id: 'privacy.direct.short', defaultMessage: 'Mentioned people only' },\n});\n\nclass StatusCheckBox extends PureComponent {\n\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    status: ImmutablePropTypes.map.isRequired,\n    checked: PropTypes.bool,\n    onToggle: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleStatusesToggle = (value, checked) => {\n    const { onToggle } = this.props;\n    onToggle(value, checked);\n  };\n\n  render () {\n    const { status, checked, intl } = this.props;\n\n    if (status.get('reblog')) {\n      return null;\n    }\n\n    const visibilityIconInfo = {\n      'public': { icon: 'globe', text: intl.formatMessage(messages.public_short) },\n      'unlisted': { icon: 'unlock', text: intl.formatMessage(messages.unlisted_short) },\n      'private': { icon: 'lock', text: intl.formatMessage(messages.private_short) },\n      'direct': { icon: 'at', text: intl.formatMessage(messages.direct_short) },\n    };\n\n    const visibilityIcon = visibilityIconInfo[status.get('visibility')];\n\n    const labelComponent = (\n      <div className='status-check-box__status poll__option__text'>\n        <div className='detailed-status__display-name'>\n          <div className='detailed-status__display-avatar'>\n            <Avatar account={status.get('account')} size={46} />\n          </div>\n\n          <div>\n            <DisplayName account={status.get('account')} /> · <span className='status__visibility-icon'><Icon id={visibilityIcon.icon} title={visibilityIcon.text} /></span> <RelativeTimestamp timestamp={status.get('created_at')} />\n          </div>\n        </div>\n\n        <StatusContent status={status} />\n        <MediaAttachments status={status} />\n      </div>\n    );\n\n    return (\n      <Option\n        name='status_ids'\n        value={status.get('id')}\n        checked={checked}\n        onToggle={this.handleStatusesToggle}\n        label={status.get('search_index')}\n        labelComponent={labelComponent}\n        multiple\n      />\n    );\n  }\n\n}\n\nexport default injectIntl(StatusCheckBox);\n","import { connect } from 'react-redux';\n\nimport { makeGetStatus } from 'mastodon/selectors';\n\nimport StatusCheckBox from '../components/status_check_box';\n\nconst makeMapStateToProps = () => {\n  const getStatus = makeGetStatus();\n\n  const mapStateToProps = (state, { id }) => ({\n    status: getStatus(state, { id }),\n  });\n\n  return mapStateToProps;\n};\n\nexport default connect(makeMapStateToProps)(StatusCheckBox);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { OrderedSet } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport Button from 'mastodon/components/button';\nimport { LoadingIndicator } from 'mastodon/components/loading_indicator';\nimport StatusCheckBox from 'mastodon/features/report/containers/status_check_box_container';\n\nconst mapStateToProps = (state, { accountId }) => ({\n  availableStatusIds: OrderedSet(state.getIn(['timelines', `account:${accountId}:with_replies`, 'items'])),\n  isLoading: state.getIn(['timelines', `account:${accountId}:with_replies`, 'isLoading']),\n});\n\nclass Statuses extends PureComponent {\n\n  static propTypes = {\n    onNextStep: PropTypes.func.isRequired,\n    accountId: PropTypes.string.isRequired,\n    availableStatusIds: ImmutablePropTypes.set.isRequired,\n    selectedStatusIds: ImmutablePropTypes.set.isRequired,\n    isLoading: PropTypes.bool,\n    onToggle: PropTypes.func.isRequired,\n  };\n\n  handleNextClick = () => {\n    const { onNextStep } = this.props;\n    onNextStep('comment');\n  };\n\n  render () {\n    const { availableStatusIds, selectedStatusIds, onToggle, isLoading } = this.props;\n\n    return (\n      <>\n        <h3 className='report-dialog-modal__title'><FormattedMessage id='report.statuses.title' defaultMessage='Are there any posts that back up this report?' /></h3>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.statuses.subtitle' defaultMessage='Select all that apply' /></p>\n\n        <div className='report-dialog-modal__statuses'>\n          {isLoading ? <LoadingIndicator /> : availableStatusIds.union(selectedStatusIds).map(statusId => (\n            <StatusCheckBox\n              id={statusId}\n              key={statusId}\n              checked={selectedStatusIds.includes(statusId)}\n              onToggle={onToggle}\n            />\n          ))}\n        </div>\n\n        <div className='flex-spacer' />\n\n        <div className='report-dialog-modal__actions'>\n          <Button onClick={this.handleNextClick}><FormattedMessage id='report.next' defaultMessage='Next' /></Button>\n        </div>\n      </>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(Statuses);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport {\n  unfollowAccount,\n  muteAccount,\n  blockAccount,\n} from 'mastodon/actions/accounts';\nimport Button from 'mastodon/components/button';\n\nconst mapStateToProps = () => ({});\n\nclass Thanks extends PureComponent {\n\n  static propTypes = {\n    submitted: PropTypes.bool,\n    onClose: PropTypes.func.isRequired,\n    account: ImmutablePropTypes.map.isRequired,\n    dispatch: PropTypes.func.isRequired,\n  };\n\n  handleCloseClick = () => {\n    const { onClose } = this.props;\n    onClose();\n  };\n\n  handleUnfollowClick = () => {\n    const { dispatch, account, onClose } = this.props;\n    dispatch(unfollowAccount(account.get('id')));\n    onClose();\n  };\n\n  handleMuteClick = () => {\n    const { dispatch, account, onClose } = this.props;\n    dispatch(muteAccount(account.get('id')));\n    onClose();\n  };\n\n  handleBlockClick = () => {\n    const { dispatch, account, onClose } = this.props;\n    dispatch(blockAccount(account.get('id')));\n    onClose();\n  };\n\n  render () {\n    const { account, submitted } = this.props;\n\n    return (\n      <>\n        <h3 className='report-dialog-modal__title'>{submitted ? <FormattedMessage id='report.thanks.title_actionable' defaultMessage=\"Thanks for reporting, we'll look into this.\" /> : <FormattedMessage id='report.thanks.title' defaultMessage=\"Don't want to see this?\" />}</h3>\n        <p className='report-dialog-modal__lead'>{submitted ? <FormattedMessage id='report.thanks.take_action_actionable' defaultMessage='While we review this, you can take action against @{name}:' values={{ name: account.get('username') }} /> : <FormattedMessage id='report.thanks.take_action' defaultMessage='Here are your options for controlling what you see on Mastodon:' />}</p>\n\n        {account.getIn(['relationship', 'following']) && (\n          <>\n            <h4 className='report-dialog-modal__subtitle'><FormattedMessage id='report.unfollow' defaultMessage='Unfollow @{name}' values={{ name: account.get('username') }} /></h4>\n            <p className='report-dialog-modal__lead'><FormattedMessage id='report.unfollow_explanation' defaultMessage='You are following this account. To not see their posts in your home feed anymore, unfollow them.' /></p>\n            <Button secondary onClick={this.handleUnfollowClick}><FormattedMessage id='account.unfollow' defaultMessage='Unfollow' /></Button>\n            <hr />\n          </>\n        )}\n\n        <h4 className='report-dialog-modal__subtitle'><FormattedMessage id='account.mute' defaultMessage='Mute @{name}' values={{ name: account.get('username') }} /></h4>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.mute_explanation' defaultMessage='You will not see their posts. They can still follow you and see your posts and will not know that they are muted.' /></p>\n        <Button secondary onClick={this.handleMuteClick}>{!account.getIn(['relationship', 'muting']) ? <FormattedMessage id='report.mute' defaultMessage='Mute' /> : <FormattedMessage id='account.muted' defaultMessage='Muted' />}</Button>\n\n        <hr />\n\n        <h4 className='report-dialog-modal__subtitle'><FormattedMessage id='account.block' defaultMessage='Block @{name}' values={{ name: account.get('username') }} /></h4>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.block_explanation' defaultMessage='You will not see their posts. They will not be able to see your posts or follow you. They will be able to tell that they are blocked.' /></p>\n        <Button secondary onClick={this.handleBlockClick}>{!account.getIn(['relationship', 'blocking']) ? <FormattedMessage id='report.block' defaultMessage='Block' /> : <FormattedMessage id='account.blocked' defaultMessage='Blocked' />}</Button>\n\n        <div className='flex-spacer' />\n\n        <div className='report-dialog-modal__actions'>\n          <Button onClick={this.handleCloseClick}><FormattedMessage id='report.close' defaultMessage='Done' /></Button>\n        </div>\n      </>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(Thanks);\n","import PropTypes from 'prop-types';\n\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\n\nimport { OrderedSet } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { submitReport } from 'mastodon/actions/reports';\nimport { fetchServer } from 'mastodon/actions/server';\nimport { expandAccountTimeline } from 'mastodon/actions/timelines';\nimport { IconButton } from 'mastodon/components/icon_button';\nimport Category from 'mastodon/features/report/category';\nimport Comment from 'mastodon/features/report/comment';\nimport Rules from 'mastodon/features/report/rules';\nimport Statuses from 'mastodon/features/report/statuses';\nimport Thanks from 'mastodon/features/report/thanks';\nimport { makeGetAccount } from 'mastodon/selectors';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n});\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, { accountId }) => ({\n    account: getAccount(state, accountId),\n  });\n\n  return mapStateToProps;\n};\n\nclass ReportModal extends ImmutablePureComponent {\n\n  static propTypes = {\n    accountId: PropTypes.string.isRequired,\n    statusId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    account: ImmutablePropTypes.map.isRequired,\n  };\n\n  state = {\n    step: 'category',\n    selectedStatusIds: OrderedSet(this.props.statusId ? [this.props.statusId] : []),\n    selectedDomains: OrderedSet(),\n    comment: '',\n    category: null,\n    selectedRuleIds: OrderedSet(),\n    isSubmitting: false,\n    isSubmitted: false,\n  };\n\n  handleSubmit = () => {\n    const { dispatch, accountId } = this.props;\n    const { selectedStatusIds, selectedDomains, comment, category, selectedRuleIds } = this.state;\n\n    this.setState({ isSubmitting: true });\n\n    dispatch(submitReport({\n      account_id: accountId,\n      status_ids: selectedStatusIds.toArray(),\n      forward_to_domains: selectedDomains.toArray(),\n      comment,\n      forward: selectedDomains.size > 0,\n      category,\n      rule_ids: selectedRuleIds.toArray(),\n    }, this.handleSuccess, this.handleFail));\n  };\n\n  handleSuccess = () => {\n    this.setState({ isSubmitting: false, isSubmitted: true, step: 'thanks' });\n  };\n\n  handleFail = () => {\n    this.setState({ isSubmitting: false });\n  };\n\n  handleStatusToggle = (statusId, checked) => {\n    const { selectedStatusIds } = this.state;\n\n    if (checked) {\n      this.setState({ selectedStatusIds: selectedStatusIds.add(statusId) });\n    } else {\n      this.setState({ selectedStatusIds: selectedStatusIds.remove(statusId) });\n    }\n  };\n\n  handleDomainToggle = (domain, checked) => {\n    if (checked) {\n      this.setState((state) => ({ selectedDomains: state.selectedDomains.add(domain) }));\n    } else {\n      this.setState((state) => ({ selectedDomains: state.selectedDomains.remove(domain) }));\n    }\n  };\n\n  handleRuleToggle = (ruleId, checked) => {\n    if (checked) {\n      this.setState((state) => ({ selectedRuleIds: state.selectedRuleIds.add(ruleId) }));\n    } else {\n      this.setState((state) => ({ selectedRuleIds: state.selectedRuleIds.remove(ruleId) }));\n    }\n  };\n\n  handleChangeCategory = category => {\n    this.setState({ category });\n  };\n\n  handleChangeComment = comment => {\n    this.setState({ comment });\n  };\n\n  handleNextStep = step => {\n    this.setState({ step });\n  };\n\n  componentDidMount () {\n    const { dispatch, accountId } = this.props;\n\n    dispatch(expandAccountTimeline(accountId, { withReplies: true }));\n    dispatch(fetchServer());\n  }\n\n  render () {\n    const {\n      accountId,\n      account,\n      intl,\n      onClose,\n    } = this.props;\n\n    if (!account) {\n      return null;\n    }\n\n    const {\n      step,\n      selectedStatusIds,\n      selectedRuleIds,\n      selectedDomains,\n      comment,\n      category,\n      isSubmitting,\n      isSubmitted,\n    } = this.state;\n\n    const domain   = account.get('acct').split('@')[1];\n    const isRemote = !!domain;\n\n    let stepComponent;\n\n    switch(step) {\n    case 'category':\n      stepComponent = (\n        <Category\n          onNextStep={this.handleNextStep}\n          startedFrom={this.props.statusId ? 'status' : 'account'}\n          category={category}\n          onChangeCategory={this.handleChangeCategory}\n        />\n      );\n      break;\n    case 'rules':\n      stepComponent = (\n        <Rules\n          onNextStep={this.handleNextStep}\n          selectedRuleIds={selectedRuleIds}\n          onToggle={this.handleRuleToggle}\n        />\n      );\n      break;\n    case 'statuses':\n      stepComponent = (\n        <Statuses\n          onNextStep={this.handleNextStep}\n          accountId={accountId}\n          selectedStatusIds={selectedStatusIds}\n          onToggle={this.handleStatusToggle}\n        />\n      );\n      break;\n    case 'comment':\n      stepComponent = (\n        <Comment\n          onSubmit={this.handleSubmit}\n          isSubmitting={isSubmitting}\n          isRemote={isRemote}\n          comment={comment}\n          domain={domain}\n          onChangeComment={this.handleChangeComment}\n          statusIds={selectedStatusIds}\n          selectedDomains={selectedDomains}\n          onToggleDomain={this.handleDomainToggle}\n        />\n      );\n      break;\n    case 'thanks':\n      stepComponent = (\n        <Thanks\n          submitted={isSubmitted}\n          account={account}\n          onClose={onClose}\n        />\n      );\n    }\n\n    return (\n      <div className='modal-root__modal report-dialog-modal'>\n        <div className='report-modal__target'>\n          <IconButton className='report-modal__close' title={intl.formatMessage(messages.close)} icon='times' onClick={onClose} size={20} />\n          <FormattedMessage id='report.target' defaultMessage='Report {target}' values={{ target: <strong>{account.get('acct')}</strong> }} />\n        </div>\n\n        <div className='report-dialog-modal__container'>\n          {stepComponent}\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default connect(makeMapStateToProps)(injectIntl(ReportModal));\n"],"sourceRoot":""}