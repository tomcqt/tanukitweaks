{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/subscribed_languages_modal/index.jsx"],"names":["messages","defineMessages","close","id","defaultMessage","getAccountLanguages","createSelector","state","accountId","getIn","ImmutableList","get","statusIds","statuses","ImmutableSet","map","statusId","filter","status","SubscribedLanguagesModal","ImmutablePureComponent","constructor","arguments","selectedLanguages","this","props","handleLanguageToggle","value","checked","setState","add","delete","handleSubmit","onSubmit","toArray","onClose","renderItem","language","languages","find","includes","_jsx","Option","name","label","onToggle","multiple","render","acct","availableLanguages","intl","className","IconButton","title","formatMessage","icon","onClick","size","FormattedMessage","values","target","union","Button","disabled","is","propTypes","PropTypes","string","isRequired","ImmutablePropTypes","setOf","func","arrayOf","object","submit","defaultProps","preloadedLanguages","connect","mapStateToProps","_ref","mapDispatchToProps","dispatch","_ref2","followAccount","injectIntl"],"mappings":"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","file":"js/modals/subscribed_languages_modal-440cd6c1f0e384da9aa2.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\n\nimport { is, List as ImmutableList, Set as ImmutableSet } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport { followAccount } from 'mastodon/actions/accounts';\nimport Button from 'mastodon/components/button';\nimport { IconButton } from 'mastodon/components/icon_button';\nimport Option from 'mastodon/features/report/components/option';\nimport { languages as preloadedLanguages } from 'mastodon/initial_state';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n});\n\nconst getAccountLanguages = createSelector([\n  (state, accountId) => state.getIn(['timelines', `account:${accountId}`, 'items'], ImmutableList()),\n  state => state.get('statuses'),\n], (statusIds, statuses) =>\n  new ImmutableSet(statusIds.map(statusId => statuses.get(statusId)).filter(status => !status.get('reblog')).map(status => status.get('language'))));\n\nconst mapStateToProps = (state, { accountId }) => ({\n  acct: state.getIn(['accounts', accountId, 'acct']),\n  availableLanguages: getAccountLanguages(state, accountId),\n  selectedLanguages: ImmutableSet(state.getIn(['relationships', accountId, 'languages']) || ImmutableList()),\n});\n\nconst mapDispatchToProps = (dispatch, { accountId }) => ({\n\n  onSubmit (languages) {\n    dispatch(followAccount(accountId, { languages }));\n  },\n\n});\n\nclass SubscribedLanguagesModal extends ImmutablePureComponent {\n\n  static propTypes = {\n    accountId: PropTypes.string.isRequired,\n    acct: PropTypes.string.isRequired,\n    availableLanguages: ImmutablePropTypes.setOf(PropTypes.string),\n    selectedLanguages: ImmutablePropTypes.setOf(PropTypes.string),\n    onClose: PropTypes.func.isRequired,\n    languages: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\n    intl: PropTypes.object.isRequired,\n    submit: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    languages: preloadedLanguages,\n  };\n\n  state = {\n    selectedLanguages: this.props.selectedLanguages,\n  };\n\n  handleLanguageToggle = (value, checked) => {\n    const { selectedLanguages } = this.state;\n\n    if (checked) {\n      this.setState({ selectedLanguages: selectedLanguages.add(value) });\n    } else {\n      this.setState({ selectedLanguages: selectedLanguages.delete(value) });\n    }\n  };\n\n  handleSubmit = () => {\n    this.props.onSubmit(this.state.selectedLanguages.toArray());\n    this.props.onClose();\n  };\n\n  renderItem (value) {\n    const language = this.props.languages.find(language => language[0] === value);\n    const checked = this.state.selectedLanguages.includes(value);\n\n    if (!language) {\n      return null;\n    }\n\n    return (\n      <Option\n        key={value}\n        name='languages'\n        value={value}\n        label={language[1]}\n        checked={checked}\n        onToggle={this.handleLanguageToggle}\n        multiple\n      />\n    );\n  }\n\n  render () {\n    const { acct, availableLanguages, selectedLanguages, intl, onClose } = this.props;\n\n    return (\n      <div className='modal-root__modal report-dialog-modal'>\n        <div className='report-modal__target'>\n          <IconButton className='report-modal__close' title={intl.formatMessage(messages.close)} icon='times' onClick={onClose} size={20} />\n          <FormattedMessage id='subscribed_languages.target' defaultMessage='Change subscribed languages for {target}' values={{ target: <strong>{acct}</strong> }} />\n        </div>\n\n        <div className='report-dialog-modal__container'>\n          <p className='report-dialog-modal__lead'><FormattedMessage id='subscribed_languages.lead' defaultMessage='Only posts in selected languages will appear on your home and list timelines after the change. Select none to receive posts in all languages.' /></p>\n\n          <div>\n            {availableLanguages.union(selectedLanguages).delete(null).map(value => this.renderItem(value))}\n          </div>\n\n          <div className='flex-spacer' />\n\n          <div className='report-dialog-modal__actions'>\n            <Button disabled={is(this.state.selectedLanguages, this.props.selectedLanguages)} onClick={this.handleSubmit}><FormattedMessage id='subscribed_languages.save' defaultMessage='Save changes' /></Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(SubscribedLanguagesModal));\n"],"sourceRoot":""}